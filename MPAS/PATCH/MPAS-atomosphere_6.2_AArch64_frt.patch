diff -uprN MPAS-Model-6.2/compile.sh MPAS-Model-6.2_mod/compile.sh
--- MPAS-Model-6.2/compile.sh	1970-01-01 09:00:00.000000000 +0900
+++ MPAS-Model-6.2_mod/compile.sh	2021-03-25 17:13:26.007668689 +0900
@@ -0,0 +1,19 @@
+#!/bin/bash -x
+
+export LANG=C
+
+LANG_HOME=/opt/FJSVxtclanga/tcsds-1.2.23
+export OPAL_PREFIX=${LANG_HOME}
+export PATH=${LANG_HOME}/bin:${PATH}
+export LD_LIBRARY_PATH=${LANG_HOME}/lib64:${LD_LIBRARY_PATH}
+
+LIBdir=/fefs01/oss/kenta-w/work/lib
+NETCDFC=${LIBdir}/netcdf-4.6.1
+NETCDFF=${LIBdir}/netcdf-fortran-4.4.4
+PNETCDF=${LIBdir}/parallel-netcdf-1.8.1
+PIO=${LIBdir}/PIO
+
+make clean CORE=atmosphere
+make clean CORE=init_atmosphere
+
+make frt CORE=init_atmosphere PIO=${PIO} NETCDF=${NETCDFF} PNETCDF=${PNETCDF} OPENMP=true USE_PIO2=true
diff -uprN MPAS-Model-6.2/Makefile MPAS-Model-6.2_mod/Makefile
--- MPAS-Model-6.2/Makefile	2019-03-15 02:53:27.000000000 +0900
+++ MPAS-Model-6.2_mod/Makefile	2021-03-25 17:13:25.996668877 +0900
@@ -160,6 +160,31 @@ ifort:
 	"OPENMP = $(OPENMP)" \
 	"CPPFLAGS = $(MODEL_FORMULATION) -D_MPI -DUNDERSCORE" )
 
+frt:
+	( $(MAKE) all \
+	"FC_PARALLEL = mpifrtpx" \
+	"CC_PARALLEL = mpifccpx" \
+	"CXX_PARALLEL = mpiFCCpx" \
+	"FC_SERIAL = frtpx" \
+	"CC_SERIAL = fccpx" \
+	"CXX_SERIAL = FCCpx" \
+	"FFLAGS_PROMOTION = -CcdRR8" \
+	"FFLAGS_OPT = -Kfast,ocl -Free -Koptmsg=2 -Nlst=t" \
+	"CFLAGS_OPT = -Kfast,ocl -Koptmsg=2 -Nlst" \
+	"CXXFLAGS_OPT = -Kfast,ocl -Koptmsg=2 -Nlst=t" \
+	"LDFLAGS_OPT = -Kfast,ocl -Koptmsg=2 -Nlst=t" \
+	"FFLAGS_DEBUG = -g -Free -traceback" \
+	"CFLAGS_DEBUG = -g -traceback" \
+	"CXXFLAGS_DEBUG = -g -traceback" \
+	"LDFLAGS_DEBUG = -g -traceback" \
+	"FFLAGS_OMP = -Kopenmp -Nfjomplib" \
+	"CFLAGS_OMP = -Kopenmp -Nfjomplib" \
+	"CORE = $(CORE)" \
+	"DEBUG = $(DEBUG)" \
+	"USE_PAPI = $(USE_PAPI)" \
+	"OPENMP = $(OPENMP)" \
+	"CPPFLAGS = $(MODEL_FORMULATION) -D_MPI -DUNDERSCORE" )
+
 ifort-scorep:
 	( $(MAKE) all \
 	"FC_PARALLEL = scorep --compiler mpif90" \
diff -uprN MPAS-Model-6.2/src/core_atmosphere/dynamics/mpas_atm_time_integration.F MPAS-Model-6.2_mod/src/core_atmosphere/dynamics/mpas_atm_time_integration.F
--- MPAS-Model-6.2/src/core_atmosphere/dynamics/mpas_atm_time_integration.F	2019-03-15 02:53:27.000000000 +0900
+++ MPAS-Model-6.2_mod/src/core_atmosphere/dynamics/mpas_atm_time_integration.F	2021-03-25 17:13:26.081667420 +0900
@@ -1780,6 +1780,9 @@ module atm_time_integration
 
 !!      do iCell=cellStart,cellEnd
       do iCell=cellSolveStart,cellSolveEnd
+! Fujitsu 2021/02/08 Add >>
+!ocl clone(nVertLevels==26)
+! Fujitsu 2021/02/08 Add << 
          do i=1,nEdgesOnCell(iCell)
             iEdge = edgesOnCell(i,iCell)
 !DIR$ IVDEP
@@ -2002,6 +2005,11 @@ module atm_time_integration
       integer, intent(in) :: small_step
       real (kind=RKIND), intent(in) :: dts, epssm,cf1, cf2, cf3
       real (kind=RKIND), dimension(nVertLevels) :: ts, rs
+! Fujitsu 2021/02/08 Add >>
+      integer :: cell1_tmp(edgeEnd-edgeStart+1)
+      integer :: cell2_tmp(edgeEnd-edgeStart+1)
+      integer :: iEdge_tmp(edgeEnd-edgeStart+1), l, n
+! Fujitsu 2021/02/08 Add <<
 
   
       !
@@ -2028,7 +2036,9 @@ module atm_time_integration
         ! so that we do not have to communicate updates of u to update the cell variables (rho, w, and theta). 
 
         !MGD this loop will not be very load balanced with if-test below
-
+! Fujitsu 2021/02/08 Mod >>
+        n=1
+!ocl simd
         do iEdge=edgeStart,edgeEnd ! MGD do we really just need edges touching owned cells?
  
            cell1 = cellsOnEdge(1,iEdge)
@@ -2036,22 +2046,34 @@ module atm_time_integration
 
            ! update edges for block-owned cells
            if (cell1 <= nCellsSolve .or. cell2 <= nCellsSolve ) then
+               cell1_tmp(n)=cell1
+               cell2_tmp(n)=cell2
+               iEdge_tmp(n)=iEdge
+               n=n+1
+           endif
+         enddo
 
 !DIR$ IVDEP
+!ocl clone(nVertLevels==26), swp_weak
+         do l=1, n-1 
+            cell1=cell1_tmp(l)
+            cell2=cell2_tmp(l)
+            iEdge=iEdge_tmp(l)
               do k=1,nVertLevels
                  pgrad = ((rtheta_pp(k,cell2)-rtheta_pp(k,cell1))*invDcEdge(iEdge) )/(.5*(zz(k,cell2)+zz(k,cell1)))
                  pgrad = cqu(k,iEdge)*0.5*c2*(exner(k,cell1)+exner(k,cell2))*pgrad
                  pgrad = pgrad + 0.5*zxu(k,iEdge)*gravity*(rho_pp(k,cell1)+rho_pp(k,cell2))
                  ru_p(k,iEdge) = ru_p(k,iEdge) + dts*(tend_ru(k,iEdge) - pgrad) 
-              end do
+!fj              end do
 
               ! accumulate ru_p for use later in scalar transport
 !DIR$ IVDEP
-              do k=1,nVertLevels
+!fj              do k=1,nVertLevels
                  ruAvg(k,iEdge) = ruAvg(k,iEdge) + ru_p(k,iEdge)
               end do
 
-           end if ! end test for block-owned cells
+!           end if ! end test for block-owned cells
+! Fujitsu 2021/02/08 Mod <<
 
         end do ! end loop over edges
 
@@ -2103,6 +2125,9 @@ module atm_time_integration
             rw_p(:,iCell) = 0.0
          end if
             
+! Fujitsu 2021/02/08 Add >>
+!ocl clone(nVertLevels==26)
+! Fujitsu 2021/02/08 Add <<
          do i=1,nEdgesOnCell(iCell) 
             iEdge = edgesOnCell(i,iCell)
             cell1 = cellsOnEdge(1,iEdge)
@@ -2120,6 +2145,9 @@ module atm_time_integration
       ! serves as a gravity-wave absorbing layer, from Klemp et al 2008.
 
 !DIR$ IVDEP
+! Fujitsu 2021/02/08 Add >>
+!ocl noswp, striping(3)
+! Fujitsu 2021/02/08 Add <<
          do k=1, nVertLevels
             rs(k) = rho_pp(k,iCell) + dts*tend_rho(k,iCell) + rs(k)                  &
                             - cofrz(k)*resm*(rw_p(k+1,iCell)-rw_p(k,iCell)) 
@@ -2129,12 +2157,14 @@ module atm_time_integration
          end do
 
 !DIR$ IVDEP
+! Fujitsu 2021/02/08 Mod >>
+!ocl noswp, striping(3)
          do k=2, nVertLevels
             wwavg(k,iCell) = wwavg(k,iCell) + 0.5*(1.0-epssm)*rw_p(k,iCell)
-         end do
+!fj         end do
 
 !DIR$ IVDEP
-         do k=2, nVertLevels
+!fj         do k=2, nVertLevels
             rw_p(k,iCell) = rw_p(k,iCell) +  dts*tend_rw(k,iCell)                       &
                        - cofwz(k,iCell)*((zz(k  ,iCell)*ts(k)                           &
                                      -zz(k-1,iCell)*ts(k-1))                            &
@@ -2144,14 +2174,15 @@ module atm_time_integration
                                +resm*(rho_pp(k,iCell)+rho_pp(k-1,iCell)))               &
                        + cofwt(k  ,iCell)*(ts(k  )+resm*rtheta_pp(k  ,iCell))           &
                        + cofwt(k-1,iCell)*(ts(k-1)+resm*rtheta_pp(k-1,iCell))
-         end do
+!fj         end do
 
          ! tridiagonal solve sweeping up and then down the column
 
 !MGD VECTOR DEPENDENCE
-         do k=2,nVertLevels
+!fj          do k=2,nVertLevels
             rw_p(k,iCell) = (rw_p(k,iCell)-a_tri(k,iCell)*rw_p(k-1,iCell))*alpha_tri(k,iCell)
          end do
+! Fujitsu 2021/02/08 Mod <<
 
 !MGD VECTOR DEPENDENCE
          do k=nVertLevels,1,-1
@@ -2161,19 +2192,22 @@ module atm_time_integration
          ! the implicit Rayleigh damping on w (gravity-wave absorbing) 
 
 !DIR$ IVDEP
+! Fujitsu 2021/02/08 Mod >>
+!ocl noswp, striping(3)
          do k=2,nVertLevels
             rw_p(k,iCell) = (rw_p(k,iCell) + (rw_save(k  ,iCell) - rw(k  ,iCell)) -dts*dss(k,iCell)*               &
                         (fzm(k)*zz (k,iCell)+fzp(k)*zz (k-1,iCell))        &
                         *(fzm(k)*rho_zz(k,iCell)+fzp(k)*rho_zz(k-1,iCell))       &
                                  *w(k,iCell)    )/(1.0+dts*dss(k,iCell)) &
                          - (rw_save(k  ,iCell) - rw(k  ,iCell))
-         end do
+!fj         end do
 
          ! accumulate (rho*omega)' for use later in scalar transport
 !DIR$ IVDEP
-         do k=2,nVertLevels
+!fj         do k=2,nVertLevels
             wwAvg(k,iCell) = wwAvg(k,iCell) + 0.5*(1.0+epssm)*rw_p(k,iCell)
          end do
+! Fujitsu 2021/02/08 Mod <<
 
          ! update rho_pp and theta_pp given updated rw_p
 
@@ -2238,6 +2272,9 @@ module atm_time_integration
          if (cell1 <= nCellsSolve .or. cell2 <= nCellsSolve ) then
 
 !DIR$ IVDEP
+! Fujitsu 2021/02/08 Add >>
+!ocl NORECURRENCE, noswp, striping(3)
+! Fujitsu 2021/02/08 Add >>
             do k=1,nVertLevels
 
 !!  unscaled 3d divergence damping
@@ -2501,7 +2538,9 @@ module atm_time_integration
       ! we will compute ru and u here also, given we are here, even though we only need them on nEdgesSolve
 
 !$OMP BARRIER
-
+! Fujitsu 2021/02/08 Add >>
+!ocl clone(nVertLevels==26)
+! Fujitsu 2021/02/08 Add <<
       do iEdge=edgeStart,edgeEnd
 
          cell1 = cellsOnEdge(1,iEdge)
@@ -2522,7 +2561,9 @@ module atm_time_integration
          !  finish recovering w from (rho*omega)_p.  as when we formed (rho*omega)_p from u and w, we need
          !  to use the same flux-divergence operator as is used for the horizontal theta transport
          !  (See Klemp et al 2003).
-
+! Fujitsu 2021/02/08 Add >>
+!ocl clone(nVertLevels==26)
+! Fujitsu 2021/02/08 Add <<
          do i=1,nEdgesOnCell(iCell)
             iEdge=edgesOnCell(i,iCell)
 
@@ -4370,6 +4411,9 @@ module atm_time_integration
 
       do iCell=cellStart,cellEnd
          h_divergence(1:nVertLevels,iCell) = 0.0
+! Fujitsu 2021/02/08 Add >>
+!ocl clone(nVertLevels==26)
+! Fujitsu 2021/02/08 Add <<
          do i=1,nEdgesOnCell(iCell)
             iEdge = edgesOnCell(i,iCell)
             edge_sign = edgesOnCell_sign(i,iCell) * dvEdge(iEdge)
@@ -4451,6 +4495,9 @@ module atm_time_integration
          ! Next, nonlinear Coriolis term (q) following Ringler et al JCP 2009
 
          q(:) = 0.0
+! Fujitsu 2021/02/08 Add >>
+!ocl clone(nVertLevels==26)
+! Fujitsu 2021/02/08 Add <<
          do j = 1,nEdgesOnEdge(iEdge)
             eoe = edgesOnEdge(j,iEdge)
             do k=1,nVertLevels
@@ -4462,6 +4509,9 @@ module atm_time_integration
          end do
 
 !DIR$ IVDEP
+! Fujitsu 2021/02/08 Add >>
+!ocl noswp, striping(3)
+! Fujitsu 2021/02/08 Add <<
          do k=1,nVertLevels
 
             ! horizontal ke gradient and vorticity terms in the vector invariant formulation
@@ -4675,6 +4725,9 @@ module atm_time_integration
             iEdge = edgesOnCell(i,iCell)
             edge_sign = edgesOnCell_sign(i,iCell) * dvEdge(iEdge) * 0.5
 
+! Fujitsu 2021/02/08 Add >>
+!ocl noswp, striping(3)
+! Fujitsu 2021/02/08 Add <<
             do k=2,nVertLevels
                ru_edge_w(k) = fzm(k)*ru(k,iEdge) + fzp(k)*ru(k-1,iEdge)
             end do
@@ -4685,6 +4738,9 @@ module atm_time_integration
 
             do j=1,nAdvCellsForEdge(iEdge)
                iAdvCell = advCellsForEdge(j,iEdge)
+! Fujitsu 2021/02/08 Add >>
+!ocl noswp, striping(3)
+! Fujitsu 2021/02/08 Add <<
                do k=2,nVertLevels
                   scalar_weight = adv_coefs(j,iEdge) + sign(1.0_RKIND,ru_edge_w(k)) * adv_coefs_3rd(j,iEdge)
                   flux_arr(k) = flux_arr(k) + scalar_weight * w(k,iAdvCell)
@@ -4860,9 +4916,11 @@ module atm_time_integration
             iEdge = edgesOnCell(i,iCell)
 
             flux_arr(1:nVertLevels) = 0.0
-
             do j=1,nAdvCellsForEdge(iEdge)
                iAdvCell = advCellsForEdge(j,iEdge)
+! Fujitsu 2021/02/08 Add >>
+!ocl noswp, striping(3)
+! Fujitsu 2021/02/08 Add <<
                do k=1,nVertLevels
                   scalar_weight = adv_coefs(j,iEdge) + sign(1.0_RKIND,ru(k,iEdge))*adv_coefs_3rd(j,iEdge)
                   flux_arr(k) = flux_arr(k) + scalar_weight* theta_m(k,iAdvCell)
@@ -4881,6 +4939,7 @@ module atm_time_integration
 
       if(rk_step > 1) then
         do iCell=cellSolveStart,cellSolveEnd
+!ocl clone(nVertLevels==26)
           do i=1,nEdgesOnCell(iCell) 
             iEdge = edgesOnCell(i,iCell)
             cell1 = cellsOnEdge(1,iEdge)
@@ -4913,6 +4972,9 @@ module atm_time_integration
                cell1 = cellsOnEdge(1,iEdge)
                cell2 = cellsOnEdge(2,iEdge)
 !DIR$ IVDEP
+! Fujitsu 2021/02/08 Add >>
+!ocl noswp, striping(3)
+! Fujitsu 2021/02/08 Add <<
                do k=1,nVertLevels
 
 !  we are computing the Smagorinsky filter at more points than needed here so as to pick up the delsq_theta for 4th order filter below
@@ -5231,6 +5293,9 @@ module atm_time_integration
       !
       do iVertex=vertexStart,vertexEnd
          vorticity(1:nVertLevels,iVertex) = 0.0
+! Fujitsu 2021/02/08 Add >>
+!ocl clone(nVertLevels==26)
+! Fujitsu 2021/02/08 Add <<
          do i=1,vertexDegree
             iEdge = edgesOnVertex(i,iVertex)
             s = edgesOnVertex_sign(i,iVertex) * dcEdge(iEdge)
@@ -5327,6 +5392,9 @@ module atm_time_integration
 
          do iCell=cellStart,cellEnd
             r = invAreaCell(iCell)
+! Fujitsu 2021/02/08 Add >>
+!ocl clone(nVertLevels==26)
+! Fujitsu 2021/02/08 Add <<
             do i=1,nEdgesOnCell(iCell)
                iVertex = verticesOnCell(i,iCell)
                j = kiteForCell(i,iCell)
@@ -5351,6 +5419,9 @@ module atm_time_integration
       if (reconstruct_v) then
         do iEdge = edgeStart,edgeEnd
           v(1:nVertLevels,iEdge) = 0.0
+! Fujitsu 2021/02/08 Add >>
+!ocl clone(nVertLevels==26)
+! Fujitsu 2021/02/08 Add <<
           do i=1,nEdgesOnEdge(iEdge)
             eoe = edgesOnEdge(i,iEdge)
 !DIR$ IVDEP
@@ -5404,6 +5475,9 @@ module atm_time_integration
       do iCell=cellStart,cellEnd
          pv_cell(1:nVertLevels,iCell) = 0.0
          r = invAreaCell(iCell)
+! Fujitsu 2021/02/08 Add >>
+!ocl clone(nVertLevels==26)
+! Fujitsu 2021/02/08 Add <<
          do i=1,nEdgesOnCell(iCell)
             iVertex = verticesOnCell(i,iCell)
             j = kiteForCell(i,iCell)
@@ -5432,6 +5506,9 @@ module atm_time_integration
          ! Also precomputed inverses of dvEdge and dcEdge to avoid repeated divisions
          !
          r = config_apvm_upwinding * dt
+! Fujitsu 2021/02/08 Add >>
+!ocl clone(nVertLevels==26)
+! Fujitsu 2021/02/08 Add <<
          do iEdge = edgeStart,edgeEnd
             r1 = 1.0_RKIND * invDvEdge(iEdge)
             r2 = 1.0_RKIND * invDcEdge(iEdge)
diff -uprN MPAS-Model-6.2/src/core_init_atmosphere/inc/block_dimension_routines.inc MPAS-Model-6.2_mod/src/core_init_atmosphere/inc/block_dimension_routines.inc
--- MPAS-Model-6.2/src/core_init_atmosphere/inc/block_dimension_routines.inc	1970-01-01 09:00:00.000000000 +0900
+++ MPAS-Model-6.2_mod/src/core_init_atmosphere/inc/block_dimension_routines.inc	2021-03-25 17:13:26.083667386 +0900
@@ -0,0 +1,275 @@
+   function init_atm_setup_derived_dimensions(readDimensions, dimensionPool, configPool) result(iErr)
+
+      use mpas_derived_types
+      use mpas_pool_routines
+      use mpas_io_units
+      use mpas_log, only : mpas_log_write
+
+      implicit none
+
+      type (mpas_pool_type), intent(inout) :: readDimensions !< Input: Pool to pull read dimensions from
+      type (mpas_pool_type), intent(inout) :: configPool !< Input: Pool containing namelist options with configs
+      type (mpas_pool_type), intent(inout) :: dimensionPool !< Input/Output: Pool to add dimensions into
+
+      integer :: iErr, errLevel
+
+      integer, pointer :: nCells
+      integer, pointer :: nEdges
+      integer, pointer :: maxEdges
+      integer, pointer :: maxEdges2
+      integer, pointer :: nVertices
+      integer, pointer :: TWO
+      integer, pointer :: THREE
+      integer, pointer :: vertexDegree
+      integer, pointer :: FIFTEEN
+      integer, pointer :: TWENTYONE
+      integer, pointer :: R3
+      integer, pointer :: nVertLevels
+      integer, pointer :: nSoilLevels
+      integer, pointer :: nFGLevels
+      integer, pointer :: nFGSoilLevels
+      integer, pointer :: nVertLevelsP1
+      integer, pointer :: nMonths
+      integer, pointer :: config_nvertlevels
+      integer, pointer :: config_nsoillevels
+      integer, pointer :: config_nfglevels
+      integer, pointer :: config_nfgsoillevels
+      integer, pointer :: config_months
+
+      iErr = 0
+      errLevel = mpas_pool_get_error_level()
+      call mpas_pool_set_error_level(MPAS_POOL_SILENT)
+
+      nullify(config_nvertlevels)
+      call mpas_pool_get_config(configPool, 'config_nvertlevels', config_nvertlevels)
+      nullify(config_nsoillevels)
+      call mpas_pool_get_config(configPool, 'config_nsoillevels', config_nsoillevels)
+      nullify(config_nfglevels)
+      call mpas_pool_get_config(configPool, 'config_nfglevels', config_nfglevels)
+      nullify(config_nfgsoillevels)
+      call mpas_pool_get_config(configPool, 'config_nfgsoillevels', config_nfgsoillevels)
+      nullify(config_months)
+      call mpas_pool_get_config(configPool, 'config_months', config_months)
+
+      nullify(nCells)
+      call mpas_pool_get_dimension(dimensionPool, 'nCells', nCells)
+      nullify(nEdges)
+      call mpas_pool_get_dimension(dimensionPool, 'nEdges', nEdges)
+      nullify(maxEdges)
+      call mpas_pool_get_dimension(dimensionPool, 'maxEdges', maxEdges)
+      nullify(maxEdges2)
+      call mpas_pool_get_dimension(dimensionPool, 'maxEdges2', maxEdges2)
+      nullify(nVertices)
+      call mpas_pool_get_dimension(dimensionPool, 'nVertices', nVertices)
+      nullify(TWO)
+      call mpas_pool_get_dimension(dimensionPool, 'TWO', TWO)
+      nullify(THREE)
+      call mpas_pool_get_dimension(dimensionPool, 'THREE', THREE)
+      nullify(vertexDegree)
+      call mpas_pool_get_dimension(dimensionPool, 'vertexDegree', vertexDegree)
+      nullify(FIFTEEN)
+      call mpas_pool_get_dimension(dimensionPool, 'FIFTEEN', FIFTEEN)
+      nullify(TWENTYONE)
+      call mpas_pool_get_dimension(dimensionPool, 'TWENTYONE', TWENTYONE)
+      nullify(R3)
+      call mpas_pool_get_dimension(dimensionPool, 'R3', R3)
+      nullify(nVertLevels)
+      call mpas_pool_get_dimension(dimensionPool, 'nVertLevels', nVertLevels)
+      nullify(nSoilLevels)
+      call mpas_pool_get_dimension(dimensionPool, 'nSoilLevels', nSoilLevels)
+      nullify(nFGLevels)
+      call mpas_pool_get_dimension(dimensionPool, 'nFGLevels', nFGLevels)
+      nullify(nFGSoilLevels)
+      call mpas_pool_get_dimension(dimensionPool, 'nFGSoilLevels', nFGSoilLevels)
+      nullify(nVertLevelsP1)
+      call mpas_pool_get_dimension(dimensionPool, 'nVertLevelsP1', nVertLevelsP1)
+      nullify(nMonths)
+      call mpas_pool_get_dimension(dimensionPool, 'nMonths', nMonths)
+
+call mpas_log_write('Assigning remaining dimensions from definitions in Registry.xml ...')
+      if ( .not. associated(nCells) ) then
+         allocate(nCells)
+         nCells = MPAS_MISSING_DIM
+         call mpas_pool_add_dimension(dimensionPool, 'nCells', nCells)
+      end if
+
+      if ( .not. associated(nEdges) ) then
+         allocate(nEdges)
+         nEdges = MPAS_MISSING_DIM
+         call mpas_pool_add_dimension(dimensionPool, 'nEdges', nEdges)
+      end if
+
+      if ( .not. associated(maxEdges) ) then
+         allocate(maxEdges)
+         maxEdges = MPAS_MISSING_DIM
+         call mpas_pool_add_dimension(dimensionPool, 'maxEdges', maxEdges)
+      end if
+
+      if ( .not. associated(maxEdges2) ) then
+         allocate(maxEdges2)
+         maxEdges2 = MPAS_MISSING_DIM
+         call mpas_pool_add_dimension(dimensionPool, 'maxEdges2', maxEdges2)
+      end if
+
+      if ( .not. associated(nVertices) ) then
+         allocate(nVertices)
+         nVertices = MPAS_MISSING_DIM
+         call mpas_pool_add_dimension(dimensionPool, 'nVertices', nVertices)
+      end if
+
+      call mpas_pool_get_dimension(dimensionPool, 'TWO', TWO)
+      if ( .not. associated(TWO) ) then
+         allocate(TWO)
+         TWO = 2
+call mpas_log_write('       TWO = $i', intArgs=(/2/))
+         call mpas_pool_add_dimension(dimensionPool, 'TWO', TWO)
+          else if ( TWO == MPAS_MISSING_DIM ) then
+         TWO = 2
+          end if
+
+      call mpas_pool_get_dimension(dimensionPool, 'THREE', THREE)
+      if ( .not. associated(THREE) ) then
+         allocate(THREE)
+         THREE = 3
+call mpas_log_write('       THREE = $i', intArgs=(/3/))
+         call mpas_pool_add_dimension(dimensionPool, 'THREE', THREE)
+          else if ( THREE == MPAS_MISSING_DIM ) then
+         THREE = 3
+          end if
+
+      if ( .not. associated(vertexDegree) ) then
+         allocate(vertexDegree)
+         vertexDegree = MPAS_MISSING_DIM
+         call mpas_pool_add_dimension(dimensionPool, 'vertexDegree', vertexDegree)
+      end if
+
+      call mpas_pool_get_dimension(dimensionPool, 'FIFTEEN', FIFTEEN)
+      if ( .not. associated(FIFTEEN) ) then
+         allocate(FIFTEEN)
+         FIFTEEN = 15
+call mpas_log_write('       FIFTEEN = $i', intArgs=(/15/))
+         call mpas_pool_add_dimension(dimensionPool, 'FIFTEEN', FIFTEEN)
+          else if ( FIFTEEN == MPAS_MISSING_DIM ) then
+         FIFTEEN = 15
+          end if
+
+      call mpas_pool_get_dimension(dimensionPool, 'TWENTYONE', TWENTYONE)
+      if ( .not. associated(TWENTYONE) ) then
+         allocate(TWENTYONE)
+         TWENTYONE = 21
+call mpas_log_write('       TWENTYONE = $i', intArgs=(/21/))
+         call mpas_pool_add_dimension(dimensionPool, 'TWENTYONE', TWENTYONE)
+          else if ( TWENTYONE == MPAS_MISSING_DIM ) then
+         TWENTYONE = 21
+          end if
+
+      call mpas_pool_get_dimension(dimensionPool, 'R3', R3)
+      if ( .not. associated(R3) ) then
+         allocate(R3)
+         R3 = 3
+call mpas_log_write('       R3 = $i', intArgs=(/3/))
+         call mpas_pool_add_dimension(dimensionPool, 'R3', R3)
+          else if ( R3 == MPAS_MISSING_DIM ) then
+         R3 = 3
+          end if
+
+      call mpas_pool_get_dimension(dimensionPool, 'nVertLevels', nVertLevels)
+      if ( .not. associated(nVertLevels) ) then
+         allocate(nVertLevels)
+         nVertLevels = config_nvertlevels
+call mpas_log_write('       nVertLevels = $i (config_nvertlevels)', intArgs=(/config_nvertlevels/))
+         call mpas_pool_add_dimension(dimensionPool, 'nVertLevels', nVertLevels)
+          else if ( nVertLevels == MPAS_MISSING_DIM ) then
+         nVertLevels = config_nvertlevels
+          end if
+
+      call mpas_pool_get_dimension(dimensionPool, 'nSoilLevels', nSoilLevels)
+      if ( .not. associated(nSoilLevels) ) then
+         allocate(nSoilLevels)
+         nSoilLevels = config_nsoillevels
+call mpas_log_write('       nSoilLevels = $i (config_nsoillevels)', intArgs=(/config_nsoillevels/))
+         call mpas_pool_add_dimension(dimensionPool, 'nSoilLevels', nSoilLevels)
+          else if ( nSoilLevels == MPAS_MISSING_DIM ) then
+         nSoilLevels = config_nsoillevels
+          end if
+
+      call mpas_pool_get_dimension(dimensionPool, 'nFGLevels', nFGLevels)
+      if ( .not. associated(nFGLevels) ) then
+         allocate(nFGLevels)
+         nFGLevels = config_nfglevels
+call mpas_log_write('       nFGLevels = $i (config_nfglevels)', intArgs=(/config_nfglevels/))
+         call mpas_pool_add_dimension(dimensionPool, 'nFGLevels', nFGLevels)
+          else if ( nFGLevels == MPAS_MISSING_DIM ) then
+         nFGLevels = config_nfglevels
+          end if
+
+      call mpas_pool_get_dimension(dimensionPool, 'nFGSoilLevels', nFGSoilLevels)
+      if ( .not. associated(nFGSoilLevels) ) then
+         allocate(nFGSoilLevels)
+         nFGSoilLevels = config_nfgsoillevels
+call mpas_log_write('       nFGSoilLevels = $i (config_nfgsoillevels)', intArgs=(/config_nfgsoillevels/))
+         call mpas_pool_add_dimension(dimensionPool, 'nFGSoilLevels', nFGSoilLevels)
+          else if ( nFGSoilLevels == MPAS_MISSING_DIM ) then
+         nFGSoilLevels = config_nfgsoillevels
+          end if
+
+      call mpas_pool_get_dimension(dimensionPool, 'nVertLevelsP1', nVertLevelsP1)
+      if ( .not. associated(nVertLevelsP1) ) then
+         allocate(nVertLevelsP1)
+         nVertLevelsP1 = nVertLevels+1
+call mpas_log_write('       nVertLevelsP1 = $i', intArgs=(/nVertLevels+1/))
+         call mpas_pool_add_dimension(dimensionPool, 'nVertLevelsP1', nVertLevelsP1)
+          else if ( nVertLevelsP1 == MPAS_MISSING_DIM ) then
+         nVertLevelsP1 = nVertLevels+1
+          end if
+
+      call mpas_pool_get_dimension(dimensionPool, 'nMonths', nMonths)
+      if ( .not. associated(nMonths) ) then
+         allocate(nMonths)
+         nMonths = config_months
+call mpas_log_write('       nMonths = $i (config_months)', intArgs=(/config_months/))
+         call mpas_pool_add_dimension(dimensionPool, 'nMonths', nMonths)
+          else if ( nMonths == MPAS_MISSING_DIM ) then
+         nMonths = config_months
+          end if
+
+      call mpas_log_write(' ')
+      call mpas_log_write(' ----- done assigning dimensions from Registry.xml -----')
+      call mpas_log_write(' ')
+      call mpas_log_write(' ')
+      call mpas_pool_set_error_level(errLevel)
+
+   end function init_atm_setup_derived_dimensions
+
+
+   function init_atm_setup_decomposed_dimensions(block, manager, readDimensions, dimensionPool, totalBlocks) result(iErr)
+
+      use mpas_derived_types
+      use mpas_decomp
+      use mpas_pool_routines
+      use mpas_io_units
+      use mpas_abort, only : mpas_dmpar_global_abort
+      use mpas_log, only : mpas_log_write
+
+      implicit none
+
+      type (block_type), intent(inout) :: block !< Input: Pointer to block
+      type (mpas_streamManager_type), intent(inout) :: manager !< Input: Stream manager
+      type (mpas_pool_type), intent(inout) :: readDimensions !< Input: Pool to pull read dimensions from
+      type (mpas_pool_type), intent(inout) :: dimensionPool !< Input/Output: Pool to add dimensions into
+      integer, intent(in) :: totalBlocks !< Input: Number of blocks
+
+      integer :: iErr
+      type (field1DInteger), pointer :: ownedIndices
+      procedure (mpas_decomp_function), pointer :: decompFunc
+
+
+      iErr = 0
+      call mpas_log_write('Processing decomposed dimensions ...')
+
+      call mpas_log_write(' ')
+      call mpas_log_write(' ----- done processing decomposed dimensions -----')
+      call mpas_log_write(' ')
+      call mpas_log_write(' ')
+
+   end function init_atm_setup_decomposed_dimensions
diff -uprN MPAS-Model-6.2/src/core_init_atmosphere/inc/core_variables.inc MPAS-Model-6.2_mod/src/core_init_atmosphere/inc/core_variables.inc
--- MPAS-Model-6.2/src/core_init_atmosphere/inc/core_variables.inc	1970-01-01 09:00:00.000000000 +0900
+++ MPAS-Model-6.2_mod/src/core_init_atmosphere/inc/core_variables.inc	2021-03-25 17:13:26.083667386 +0900
@@ -0,0 +1,5 @@
+       core % modelName = 'mpas'
+       core % coreName = 'init_atmosphere'
+       core % modelVersion = '6.2'
+       core % executableName = 'init_atmosphere_model'
+       core % git_version = 'unknown'
diff -uprN MPAS-Model-6.2/src/core_init_atmosphere/inc/define_packages.inc MPAS-Model-6.2_mod/src/core_init_atmosphere/inc/define_packages.inc
--- MPAS-Model-6.2/src/core_init_atmosphere/inc/define_packages.inc	1970-01-01 09:00:00.000000000 +0900
+++ MPAS-Model-6.2_mod/src/core_init_atmosphere/inc/define_packages.inc	2021-03-25 17:13:26.083667386 +0900
@@ -0,0 +1,18 @@
+   function init_atm_define_packages(packagePool) result(iErr)
+      use mpas_derived_types
+      use mpas_pool_routines
+      use mpas_io_units
+      implicit none
+      type (mpas_pool_type), intent(inout) :: packagePool !< Input: MPAS Pool for containing package logicals.
+
+      integer :: iErr
+
+      iErr = 0
+      call mpas_pool_add_package(packagePool, 'initial_condsActive', .false.)
+      call mpas_pool_add_package(packagePool, 'sfc_updateActive', .false.)
+      call mpas_pool_add_package(packagePool, 'gwd_stage_inActive', .false.)
+      call mpas_pool_add_package(packagePool, 'vertical_stage_inActive', .false.)
+      call mpas_pool_add_package(packagePool, 'vertical_stage_outActive', .false.)
+      call mpas_pool_add_package(packagePool, 'met_stage_inActive', .false.)
+      call mpas_pool_add_package(packagePool, 'met_stage_outActive', .false.)
+   end function init_atm_define_packages
diff -uprN MPAS-Model-6.2/src/core_init_atmosphere/inc/domain_variables.inc MPAS-Model-6.2_mod/src/core_init_atmosphere/inc/domain_variables.inc
--- MPAS-Model-6.2/src/core_init_atmosphere/inc/domain_variables.inc	1970-01-01 09:00:00.000000000 +0900
+++ MPAS-Model-6.2_mod/src/core_init_atmosphere/inc/domain_variables.inc	2021-03-25 17:13:26.083667386 +0900
@@ -0,0 +1,2 @@
+       domain % namelist_filename = 'namelist.init_atmosphere'
+       domain % streams_filename = 'streams.init_atmosphere'
diff -uprN MPAS-Model-6.2/src/core_init_atmosphere/inc/namelist_call.inc MPAS-Model-6.2_mod/src/core_init_atmosphere/inc/namelist_call.inc
--- MPAS-Model-6.2/src/core_init_atmosphere/inc/namelist_call.inc	1970-01-01 09:00:00.000000000 +0900
+++ MPAS-Model-6.2_mod/src/core_init_atmosphere/inc/namelist_call.inc	2021-03-25 17:13:26.083667386 +0900
@@ -0,0 +1,35 @@
+   function init_atm_setup_namelists(configPool, namelistFilename, dminfo) result(iErr)
+      use mpas_derived_types
+      use mpas_pool_routines
+      use mpas_io_units
+      use mpas_abort, only : mpas_dmpar_global_abort
+      use mpas_log, only : mpas_log_write
+      implicit none
+      type (mpas_pool_type), intent(inout) :: configPool
+      character (len=*), intent(in) :: namelistFilename
+      type (dm_info), intent(in) :: dminfo
+      integer :: iErr
+
+      integer :: unitNumber
+      logical :: nmlExists
+
+      iErr = 0
+      unitNumber = 21
+      call mpas_log_write('Reading namelist from file '//trim(namelistFilename))
+      inquire(file=trim(namelistFilename), exist=nmlExists)
+      if ( .not. nmlExists ) then
+         call mpas_dmpar_global_abort('ERROR: Namelist file '//trim(namelistFilename)//' does not exist.')
+      end if
+      open(unitNumber,file=trim(namelistFilename),status='old',form='formatted')
+
+      call init_atm_setup_nmlrec_nhyd_model(configPool, unitNumber, dminfo)
+      call init_atm_setup_nmlrec_dimensions(configPool, unitNumber, dminfo)
+      call init_atm_setup_nmlrec_data_sources(configPool, unitNumber, dminfo)
+      call init_atm_setup_nmlrec_vertical_grid(configPool, unitNumber, dminfo)
+      call init_atm_setup_nmlrec_interpolation_control(configPool, unitNumber, dminfo)
+      call init_atm_setup_nmlrec_preproc_stages(configPool, unitNumber, dminfo)
+      call init_atm_setup_nmlrec_io(configPool, unitNumber, dminfo)
+      call init_atm_setup_nmlrec_decomposition(configPool, unitNumber, dminfo)
+
+      close(unitNumber)
+   end function init_atm_setup_namelists
diff -uprN MPAS-Model-6.2/src/core_init_atmosphere/inc/namelist_defines.inc MPAS-Model-6.2_mod/src/core_init_atmosphere/inc/namelist_defines.inc
--- MPAS-Model-6.2/src/core_init_atmosphere/inc/namelist_defines.inc	1970-01-01 09:00:00.000000000 +0900
+++ MPAS-Model-6.2_mod/src/core_init_atmosphere/inc/namelist_defines.inc	2021-03-25 17:13:26.083667386 +0900
@@ -0,0 +1,453 @@
+   subroutine init_atm_setup_nmlrec_nhyd_model(configPool, unitNumber, dminfo)
+      use mpas_log, only : mpas_log_write, mpas_log_escape_dollars
+      implicit none
+      type (mpas_pool_type), intent(inout) :: configPool
+      integer, intent(in) :: unitNumber
+      type (dm_info), intent(in) :: dminfo
+      type (mpas_pool_type), pointer :: recordPool
+      integer :: ierr
+
+      integer :: config_init_case = 7
+      character (len=StrKIND) :: config_calendar_type = 'gregorian'
+      character (len=StrKIND) :: config_start_time = '2010-10-23_00:00:00'
+      character (len=StrKIND) :: config_stop_time = '2010-10-23_00:00:00'
+      integer :: config_theta_adv_order = 3
+      real (kind=RKIND) :: config_coef_3rd_order = 0.250000
+      integer :: config_num_halos = 2
+
+      namelist /nhyd_model/ &
+         config_init_case, &
+         config_calendar_type, &
+         config_start_time, &
+         config_stop_time, &
+         config_theta_adv_order, &
+         config_coef_3rd_order, &
+         config_num_halos
+      if (dminfo % my_proc_id == IO_NODE) then
+         rewind(unitNumber)
+         read(unitNumber, nhyd_model, iostat=ierr)
+      end if
+      call mpas_dmpar_bcast_int(dminfo, ierr)
+
+      if (ierr <= 0) then
+         call mpas_dmpar_bcast_int(dminfo, config_init_case)
+         call mpas_dmpar_bcast_char(dminfo, config_calendar_type)
+         call mpas_dmpar_bcast_char(dminfo, config_start_time)
+         call mpas_dmpar_bcast_char(dminfo, config_stop_time)
+         call mpas_dmpar_bcast_int(dminfo, config_theta_adv_order)
+         call mpas_dmpar_bcast_real(dminfo, config_coef_3rd_order)
+         call mpas_dmpar_bcast_int(dminfo, config_num_halos)
+         if (ierr < 0) then
+            call mpas_log_write('*** Encountered an issue while attempting to read namelist record nhyd_model')
+            call mpas_log_write('    The following values will be used for variables in this record:')
+            call mpas_log_write(' ')
+            call mpas_log_write('        config_init_case = $i', intArgs=(/config_init_case/))
+            call mpas_log_write('        config_calendar_type = '//mpas_log_escape_dollars(config_calendar_type))
+            call mpas_log_write('        config_start_time = '//mpas_log_escape_dollars(config_start_time))
+            call mpas_log_write('        config_stop_time = '//mpas_log_escape_dollars(config_stop_time))
+            call mpas_log_write('        config_theta_adv_order = $i', intArgs=(/config_theta_adv_order/))
+            call mpas_log_write('        config_coef_3rd_order = $r', realArgs=(/config_coef_3rd_order/))
+            call mpas_log_write('        config_num_halos = $i', intArgs=(/config_num_halos/))
+            call mpas_log_write(' ')
+         end if
+      else if (ierr > 0) then
+         call mpas_log_write('Error while reading namelist record nhyd_model.', MPAS_LOG_CRIT)
+      end if
+
+      call mpas_pool_add_config(configPool, 'config_init_case', config_init_case)
+      call mpas_pool_add_config(configPool, 'config_calendar_type', config_calendar_type)
+      call mpas_pool_add_config(configPool, 'config_start_time', config_start_time)
+      call mpas_pool_add_config(configPool, 'config_stop_time', config_stop_time)
+      call mpas_pool_add_config(configPool, 'config_theta_adv_order', config_theta_adv_order)
+      call mpas_pool_add_config(configPool, 'config_coef_3rd_order', config_coef_3rd_order)
+      call mpas_pool_add_config(configPool, 'config_num_halos', config_num_halos)
+
+   end subroutine init_atm_setup_nmlrec_nhyd_model
+
+
+   subroutine init_atm_setup_nmlrec_dimensions(configPool, unitNumber, dminfo)
+      use mpas_log, only : mpas_log_write, mpas_log_escape_dollars
+      implicit none
+      type (mpas_pool_type), intent(inout) :: configPool
+      integer, intent(in) :: unitNumber
+      type (dm_info), intent(in) :: dminfo
+      type (mpas_pool_type), pointer :: recordPool
+      integer :: ierr
+
+      integer :: config_nvertlevels = 55
+      integer :: config_nsoillevels = 4
+      integer :: config_nfglevels = 38
+      integer :: config_nfgsoillevels = 4
+      integer :: config_months = 12
+
+      namelist /dimensions/ &
+         config_nvertlevels, &
+         config_nsoillevels, &
+         config_nfglevels, &
+         config_nfgsoillevels, &
+         config_months
+      if (dminfo % my_proc_id == IO_NODE) then
+         rewind(unitNumber)
+         read(unitNumber, dimensions, iostat=ierr)
+      end if
+      call mpas_dmpar_bcast_int(dminfo, ierr)
+
+      if (ierr <= 0) then
+         call mpas_dmpar_bcast_int(dminfo, config_nvertlevels)
+         call mpas_dmpar_bcast_int(dminfo, config_nsoillevels)
+         call mpas_dmpar_bcast_int(dminfo, config_nfglevels)
+         call mpas_dmpar_bcast_int(dminfo, config_nfgsoillevels)
+         call mpas_dmpar_bcast_int(dminfo, config_months)
+         if (ierr < 0) then
+            call mpas_log_write('*** Encountered an issue while attempting to read namelist record dimensions')
+            call mpas_log_write('    The following values will be used for variables in this record:')
+            call mpas_log_write(' ')
+            call mpas_log_write('        config_nvertlevels = $i', intArgs=(/config_nvertlevels/))
+            call mpas_log_write('        config_nsoillevels = $i', intArgs=(/config_nsoillevels/))
+            call mpas_log_write('        config_nfglevels = $i', intArgs=(/config_nfglevels/))
+            call mpas_log_write('        config_nfgsoillevels = $i', intArgs=(/config_nfgsoillevels/))
+            call mpas_log_write('        config_months = $i', intArgs=(/config_months/))
+            call mpas_log_write(' ')
+         end if
+      else if (ierr > 0) then
+         call mpas_log_write('Error while reading namelist record dimensions.', MPAS_LOG_CRIT)
+      end if
+
+      call mpas_pool_add_config(configPool, 'config_nvertlevels', config_nvertlevels)
+      call mpas_pool_add_config(configPool, 'config_nsoillevels', config_nsoillevels)
+      call mpas_pool_add_config(configPool, 'config_nfglevels', config_nfglevels)
+      call mpas_pool_add_config(configPool, 'config_nfgsoillevels', config_nfgsoillevels)
+      call mpas_pool_add_config(configPool, 'config_months', config_months)
+
+   end subroutine init_atm_setup_nmlrec_dimensions
+
+
+   subroutine init_atm_setup_nmlrec_data_sources(configPool, unitNumber, dminfo)
+      use mpas_log, only : mpas_log_write, mpas_log_escape_dollars
+      implicit none
+      type (mpas_pool_type), intent(inout) :: configPool
+      integer, intent(in) :: unitNumber
+      type (dm_info), intent(in) :: dminfo
+      type (mpas_pool_type), pointer :: recordPool
+      integer :: ierr
+
+      character (len=StrKIND) :: config_geog_data_path = '/glade/p/work/wrfhelp/WPS_GEOG/'
+      character (len=StrKIND) :: config_met_prefix = 'CFSR'
+      character (len=StrKIND) :: config_sfc_prefix = 'SST'
+      integer :: config_fg_interval = 86400
+      character (len=StrKIND) :: config_landuse_data = 'USGS'
+      character (len=StrKIND) :: config_topo_data = 'GTOPO30'
+      logical :: config_use_spechumd = .false.
+
+      namelist /data_sources/ &
+         config_geog_data_path, &
+         config_met_prefix, &
+         config_sfc_prefix, &
+         config_fg_interval, &
+         config_landuse_data, &
+         config_topo_data, &
+         config_use_spechumd
+      if (dminfo % my_proc_id == IO_NODE) then
+         rewind(unitNumber)
+         read(unitNumber, data_sources, iostat=ierr)
+      end if
+      call mpas_dmpar_bcast_int(dminfo, ierr)
+
+      if (ierr <= 0) then
+         call mpas_dmpar_bcast_char(dminfo, config_geog_data_path)
+         call mpas_dmpar_bcast_char(dminfo, config_met_prefix)
+         call mpas_dmpar_bcast_char(dminfo, config_sfc_prefix)
+         call mpas_dmpar_bcast_int(dminfo, config_fg_interval)
+         call mpas_dmpar_bcast_char(dminfo, config_landuse_data)
+         call mpas_dmpar_bcast_char(dminfo, config_topo_data)
+         call mpas_dmpar_bcast_logical(dminfo, config_use_spechumd)
+         if (ierr < 0) then
+            call mpas_log_write('*** Encountered an issue while attempting to read namelist record data_sources')
+            call mpas_log_write('    The following values will be used for variables in this record:')
+            call mpas_log_write(' ')
+            call mpas_log_write('        config_geog_data_path = '//mpas_log_escape_dollars(config_geog_data_path))
+            call mpas_log_write('        config_met_prefix = '//mpas_log_escape_dollars(config_met_prefix))
+            call mpas_log_write('        config_sfc_prefix = '//mpas_log_escape_dollars(config_sfc_prefix))
+            call mpas_log_write('        config_fg_interval = $i', intArgs=(/config_fg_interval/))
+            call mpas_log_write('        config_landuse_data = '//mpas_log_escape_dollars(config_landuse_data))
+            call mpas_log_write('        config_topo_data = '//mpas_log_escape_dollars(config_topo_data))
+            call mpas_log_write('        config_use_spechumd = $l', logicArgs=(/config_use_spechumd/))
+            call mpas_log_write(' ')
+         end if
+      else if (ierr > 0) then
+         call mpas_log_write('Error while reading namelist record data_sources.', MPAS_LOG_CRIT)
+      end if
+
+      call mpas_pool_add_config(configPool, 'config_geog_data_path', config_geog_data_path)
+      call mpas_pool_add_config(configPool, 'config_met_prefix', config_met_prefix)
+      call mpas_pool_add_config(configPool, 'config_sfc_prefix', config_sfc_prefix)
+      call mpas_pool_add_config(configPool, 'config_fg_interval', config_fg_interval)
+      call mpas_pool_add_config(configPool, 'config_landuse_data', config_landuse_data)
+      call mpas_pool_add_config(configPool, 'config_topo_data', config_topo_data)
+      call mpas_pool_add_config(configPool, 'config_use_spechumd', config_use_spechumd)
+
+   end subroutine init_atm_setup_nmlrec_data_sources
+
+
+   subroutine init_atm_setup_nmlrec_vertical_grid(configPool, unitNumber, dminfo)
+      use mpas_log, only : mpas_log_write, mpas_log_escape_dollars
+      implicit none
+      type (mpas_pool_type), intent(inout) :: configPool
+      integer, intent(in) :: unitNumber
+      type (dm_info), intent(in) :: dminfo
+      type (mpas_pool_type), pointer :: recordPool
+      integer :: ierr
+
+      real (kind=RKIND) :: config_ztop = 30000.000000
+      integer :: config_nsmterrain = 1
+      logical :: config_smooth_surfaces = .true.
+      real (kind=RKIND) :: config_dzmin = 0.300000
+      integer :: config_nsm = 30
+      logical :: config_tc_vertical_grid = .true.
+
+      namelist /vertical_grid/ &
+         config_ztop, &
+         config_nsmterrain, &
+         config_smooth_surfaces, &
+         config_dzmin, &
+         config_nsm, &
+         config_tc_vertical_grid
+      if (dminfo % my_proc_id == IO_NODE) then
+         rewind(unitNumber)
+         read(unitNumber, vertical_grid, iostat=ierr)
+      end if
+      call mpas_dmpar_bcast_int(dminfo, ierr)
+
+      if (ierr <= 0) then
+         call mpas_dmpar_bcast_real(dminfo, config_ztop)
+         call mpas_dmpar_bcast_int(dminfo, config_nsmterrain)
+         call mpas_dmpar_bcast_logical(dminfo, config_smooth_surfaces)
+         call mpas_dmpar_bcast_real(dminfo, config_dzmin)
+         call mpas_dmpar_bcast_int(dminfo, config_nsm)
+         call mpas_dmpar_bcast_logical(dminfo, config_tc_vertical_grid)
+         if (ierr < 0) then
+            call mpas_log_write('*** Encountered an issue while attempting to read namelist record vertical_grid')
+            call mpas_log_write('    The following values will be used for variables in this record:')
+            call mpas_log_write(' ')
+            call mpas_log_write('        config_ztop = $r', realArgs=(/config_ztop/))
+            call mpas_log_write('        config_nsmterrain = $i', intArgs=(/config_nsmterrain/))
+            call mpas_log_write('        config_smooth_surfaces = $l', logicArgs=(/config_smooth_surfaces/))
+            call mpas_log_write('        config_dzmin = $r', realArgs=(/config_dzmin/))
+            call mpas_log_write('        config_nsm = $i', intArgs=(/config_nsm/))
+            call mpas_log_write('        config_tc_vertical_grid = $l', logicArgs=(/config_tc_vertical_grid/))
+            call mpas_log_write(' ')
+         end if
+      else if (ierr > 0) then
+         call mpas_log_write('Error while reading namelist record vertical_grid.', MPAS_LOG_CRIT)
+      end if
+
+      call mpas_pool_add_config(configPool, 'config_ztop', config_ztop)
+      call mpas_pool_add_config(configPool, 'config_nsmterrain', config_nsmterrain)
+      call mpas_pool_add_config(configPool, 'config_smooth_surfaces', config_smooth_surfaces)
+      call mpas_pool_add_config(configPool, 'config_dzmin', config_dzmin)
+      call mpas_pool_add_config(configPool, 'config_nsm', config_nsm)
+      call mpas_pool_add_config(configPool, 'config_tc_vertical_grid', config_tc_vertical_grid)
+
+   end subroutine init_atm_setup_nmlrec_vertical_grid
+
+
+   subroutine init_atm_setup_nmlrec_interpolation_control(configPool, unitNumber, dminfo)
+      use mpas_log, only : mpas_log_write, mpas_log_escape_dollars
+      implicit none
+      type (mpas_pool_type), intent(inout) :: configPool
+      integer, intent(in) :: unitNumber
+      type (dm_info), intent(in) :: dminfo
+      type (mpas_pool_type), pointer :: recordPool
+      integer :: ierr
+
+      character (len=StrKIND) :: config_extrap_airtemp = 'linear'
+
+      namelist /interpolation_control/ &
+         config_extrap_airtemp
+      if (dminfo % my_proc_id == IO_NODE) then
+         rewind(unitNumber)
+         read(unitNumber, interpolation_control, iostat=ierr)
+      end if
+      call mpas_dmpar_bcast_int(dminfo, ierr)
+
+      if (ierr <= 0) then
+         call mpas_dmpar_bcast_char(dminfo, config_extrap_airtemp)
+         if (ierr < 0) then
+            call mpas_log_write('*** Encountered an issue while attempting to read namelist record interpolation_control')
+            call mpas_log_write('    The following values will be used for variables in this record:')
+            call mpas_log_write(' ')
+            call mpas_log_write('        config_extrap_airtemp = '//mpas_log_escape_dollars(config_extrap_airtemp))
+            call mpas_log_write(' ')
+         end if
+      else if (ierr > 0) then
+         call mpas_log_write('Error while reading namelist record interpolation_control.', MPAS_LOG_CRIT)
+      end if
+
+      call mpas_pool_add_config(configPool, 'config_extrap_airtemp', config_extrap_airtemp)
+
+   end subroutine init_atm_setup_nmlrec_interpolation_control
+
+
+   subroutine init_atm_setup_nmlrec_preproc_stages(configPool, unitNumber, dminfo)
+      use mpas_log, only : mpas_log_write, mpas_log_escape_dollars
+      implicit none
+      type (mpas_pool_type), intent(inout) :: configPool
+      integer, intent(in) :: unitNumber
+      type (dm_info), intent(in) :: dminfo
+      type (mpas_pool_type), pointer :: recordPool
+      integer :: ierr
+
+      logical :: config_static_interp = .true.
+      logical :: config_native_gwd_static = .true.
+      real (kind=RKIND) :: config_gwd_cell_scaling = 1.000000
+      logical :: config_vertical_grid = .true.
+      logical :: config_met_interp = .true.
+      logical :: config_input_sst = .false.
+      logical :: config_frac_seaice = .true.
+
+      namelist /preproc_stages/ &
+         config_static_interp, &
+         config_native_gwd_static, &
+         config_gwd_cell_scaling, &
+         config_vertical_grid, &
+         config_met_interp, &
+         config_input_sst, &
+         config_frac_seaice
+      if (dminfo % my_proc_id == IO_NODE) then
+         rewind(unitNumber)
+         read(unitNumber, preproc_stages, iostat=ierr)
+      end if
+      call mpas_dmpar_bcast_int(dminfo, ierr)
+
+      if (ierr <= 0) then
+         call mpas_dmpar_bcast_logical(dminfo, config_static_interp)
+         call mpas_dmpar_bcast_logical(dminfo, config_native_gwd_static)
+         call mpas_dmpar_bcast_real(dminfo, config_gwd_cell_scaling)
+         call mpas_dmpar_bcast_logical(dminfo, config_vertical_grid)
+         call mpas_dmpar_bcast_logical(dminfo, config_met_interp)
+         call mpas_dmpar_bcast_logical(dminfo, config_input_sst)
+         call mpas_dmpar_bcast_logical(dminfo, config_frac_seaice)
+         if (ierr < 0) then
+            call mpas_log_write('*** Encountered an issue while attempting to read namelist record preproc_stages')
+            call mpas_log_write('    The following values will be used for variables in this record:')
+            call mpas_log_write(' ')
+            call mpas_log_write('        config_static_interp = $l', logicArgs=(/config_static_interp/))
+            call mpas_log_write('        config_native_gwd_static = $l', logicArgs=(/config_native_gwd_static/))
+            call mpas_log_write('        config_gwd_cell_scaling = $r', realArgs=(/config_gwd_cell_scaling/))
+            call mpas_log_write('        config_vertical_grid = $l', logicArgs=(/config_vertical_grid/))
+            call mpas_log_write('        config_met_interp = $l', logicArgs=(/config_met_interp/))
+            call mpas_log_write('        config_input_sst = $l', logicArgs=(/config_input_sst/))
+            call mpas_log_write('        config_frac_seaice = $l', logicArgs=(/config_frac_seaice/))
+            call mpas_log_write(' ')
+         end if
+      else if (ierr > 0) then
+         call mpas_log_write('Error while reading namelist record preproc_stages.', MPAS_LOG_CRIT)
+      end if
+
+      call mpas_pool_add_config(configPool, 'config_static_interp', config_static_interp)
+      call mpas_pool_add_config(configPool, 'config_native_gwd_static', config_native_gwd_static)
+      call mpas_pool_add_config(configPool, 'config_gwd_cell_scaling', config_gwd_cell_scaling)
+      call mpas_pool_add_config(configPool, 'config_vertical_grid', config_vertical_grid)
+      call mpas_pool_add_config(configPool, 'config_met_interp', config_met_interp)
+      call mpas_pool_add_config(configPool, 'config_input_sst', config_input_sst)
+      call mpas_pool_add_config(configPool, 'config_frac_seaice', config_frac_seaice)
+
+   end subroutine init_atm_setup_nmlrec_preproc_stages
+
+
+   subroutine init_atm_setup_nmlrec_io(configPool, unitNumber, dminfo)
+      use mpas_log, only : mpas_log_write, mpas_log_escape_dollars
+      implicit none
+      type (mpas_pool_type), intent(inout) :: configPool
+      integer, intent(in) :: unitNumber
+      type (dm_info), intent(in) :: dminfo
+      type (mpas_pool_type), pointer :: recordPool
+      integer :: ierr
+
+      integer :: config_pio_num_iotasks = 0
+      integer :: config_pio_stride = 1
+
+      namelist /io/ &
+         config_pio_num_iotasks, &
+         config_pio_stride
+      if (dminfo % my_proc_id == IO_NODE) then
+         rewind(unitNumber)
+         read(unitNumber, io, iostat=ierr)
+      end if
+      call mpas_dmpar_bcast_int(dminfo, ierr)
+
+      if (ierr <= 0) then
+         call mpas_dmpar_bcast_int(dminfo, config_pio_num_iotasks)
+         call mpas_dmpar_bcast_int(dminfo, config_pio_stride)
+         if (ierr < 0) then
+            call mpas_log_write('*** Encountered an issue while attempting to read namelist record io')
+            call mpas_log_write('    The following values will be used for variables in this record:')
+            call mpas_log_write(' ')
+            call mpas_log_write('        config_pio_num_iotasks = $i', intArgs=(/config_pio_num_iotasks/))
+            call mpas_log_write('        config_pio_stride = $i', intArgs=(/config_pio_stride/))
+            call mpas_log_write(' ')
+         end if
+      else if (ierr > 0) then
+         call mpas_log_write('Error while reading namelist record io.', MPAS_LOG_CRIT)
+      end if
+
+      call mpas_pool_add_config(configPool, 'config_pio_num_iotasks', config_pio_num_iotasks)
+      call mpas_pool_add_config(configPool, 'config_pio_stride', config_pio_stride)
+
+   end subroutine init_atm_setup_nmlrec_io
+
+
+   subroutine init_atm_setup_nmlrec_decomposition(configPool, unitNumber, dminfo)
+      use mpas_log, only : mpas_log_write, mpas_log_escape_dollars
+      implicit none
+      type (mpas_pool_type), intent(inout) :: configPool
+      integer, intent(in) :: unitNumber
+      type (dm_info), intent(in) :: dminfo
+      type (mpas_pool_type), pointer :: recordPool
+      integer :: ierr
+
+      character (len=StrKIND) :: config_block_decomp_file_prefix = 'x1.40962.graph.info.part.'
+      integer :: config_number_of_blocks = 0
+      logical :: config_explicit_proc_decomp = .false.
+      character (len=StrKIND) :: config_proc_decomp_file_prefix = 'graph.info.part.'
+
+      namelist /decomposition/ &
+         config_block_decomp_file_prefix, &
+         config_number_of_blocks, &
+         config_explicit_proc_decomp, &
+         config_proc_decomp_file_prefix
+      if (dminfo % my_proc_id == IO_NODE) then
+         rewind(unitNumber)
+         read(unitNumber, decomposition, iostat=ierr)
+      end if
+      call mpas_dmpar_bcast_int(dminfo, ierr)
+
+      if (ierr <= 0) then
+         call mpas_dmpar_bcast_char(dminfo, config_block_decomp_file_prefix)
+         call mpas_dmpar_bcast_int(dminfo, config_number_of_blocks)
+         call mpas_dmpar_bcast_logical(dminfo, config_explicit_proc_decomp)
+         call mpas_dmpar_bcast_char(dminfo, config_proc_decomp_file_prefix)
+         if (ierr < 0) then
+            call mpas_log_write('*** Encountered an issue while attempting to read namelist record decomposition')
+            call mpas_log_write('    The following values will be used for variables in this record:')
+            call mpas_log_write(' ')
+            call mpas_log_write('        config_block_decomp_file_prefix = '&
+//''//mpas_log_escape_dollars(config_block_decomp_file_prefix))
+            call mpas_log_write('        config_number_of_blocks = $i', intArgs=(/config_number_of_blocks/))
+            call mpas_log_write('        config_explicit_proc_decomp = $l', logicArgs=(/config_explicit_proc_decomp/))
+            call mpas_log_write('        config_proc_decomp_file_prefix = '&
+//''//mpas_log_escape_dollars(config_proc_decomp_file_prefix))
+            call mpas_log_write(' ')
+         end if
+      else if (ierr > 0) then
+         call mpas_log_write('Error while reading namelist record decomposition.', MPAS_LOG_CRIT)
+      end if
+
+      call mpas_pool_add_config(configPool, 'config_block_decomp_file_prefix', config_block_decomp_file_prefix)
+      call mpas_pool_add_config(configPool, 'config_number_of_blocks', config_number_of_blocks)
+      call mpas_pool_add_config(configPool, 'config_explicit_proc_decomp', config_explicit_proc_decomp)
+      call mpas_pool_add_config(configPool, 'config_proc_decomp_file_prefix', config_proc_decomp_file_prefix)
+
+   end subroutine init_atm_setup_nmlrec_decomposition
+
+
diff -uprN MPAS-Model-6.2/src/core_init_atmosphere/inc/setup_immutable_streams.inc MPAS-Model-6.2_mod/src/core_init_atmosphere/inc/setup_immutable_streams.inc
--- MPAS-Model-6.2/src/core_init_atmosphere/inc/setup_immutable_streams.inc	1970-01-01 09:00:00.000000000 +0900
+++ MPAS-Model-6.2_mod/src/core_init_atmosphere/inc/setup_immutable_streams.inc	2021-03-25 17:13:26.084667369 +0900
@@ -0,0 +1,335 @@
+function init_atm_setup_immutable_streams(manager) result(iErr)
+
+   use MPAS_derived_types, only : MPAS_streamManager_type, &
+                                  MPAS_STREAM_INPUT_OUTPUT, MPAS_STREAM_INPUT, &
+                                  MPAS_STREAM_OUTPUT, MPAS_STREAM_NONE, MPAS_STREAM_PROPERTY_IMMUTABLE
+   use MPAS_stream_manager, only : MPAS_stream_mgr_create_stream, MPAS_stream_mgr_set_property, &
+                                   MPAS_stream_mgr_add_field, MPAS_stream_mgr_add_pool
+   use mpas_io_units
+
+   implicit none
+
+   type (MPAS_streamManager_type), pointer :: manager
+   character (len=StrKIND) :: packages
+   integer :: iErr
+
+   iErr = 0
+
+   call MPAS_stream_mgr_create_stream(manager, 'input', MPAS_STREAM_INPUT, 'x1.40962.grid.nc', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'latCell', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'lonCell', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'xCell', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'yCell', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'zCell', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'indexToCellID', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'latEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'lonEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'xEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'yEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'zEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'indexToEdgeID', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'latVertex', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'lonVertex', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'xVertex', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'yVertex', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'zVertex', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'indexToVertexID', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'cellsOnEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'nEdgesOnCell', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'nEdgesOnEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'edgesOnCell', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'edgesOnEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'weightsOnEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'dvEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'dcEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'angleEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'areaCell', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'areaTriangle', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'cellsOnCell', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'verticesOnCell', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'verticesOnEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'edgesOnVertex', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'cellsOnVertex', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'kiteAreasOnVertex', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'input', 'meshDensity', ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'edgeNormalVectors', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'localVerticalUnitVectors', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'cellTangentPlane', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'fEdge', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'fVertex', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'ter', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'landmask', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'ivgtyp', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'mminlu', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'isltyp', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'snoalb', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'soiltemp', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'greenfrac', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'shdmin', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'shdmax', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'albedo12m', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'varsso', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'var2d', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'con', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'oa1', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'oa2', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'oa3', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'oa4', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'ol1', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'ol2', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'ol3', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'ol4', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'deriv_two', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'advCells', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'defc_a', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'defc_b', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'gwd_stage_in;vertical_stage_in;met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'coeffs_reconstruct', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'cf1', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'cf2', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'cf3', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'hx', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'zgrid', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'rdzw', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'dzu', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'rdzu', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'fzm', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'fzp', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'zxu', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'zz', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'zb', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'zb3', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_in'
+   call MPAS_stream_mgr_add_field(manager, 'input', 'dss', packages=packages, ierr=ierr)
+   call MPAS_stream_mgr_set_property(manager, 'input', MPAS_STREAM_PROPERTY_IMMUTABLE, .true., ierr=ierr)
+
+   call MPAS_stream_mgr_create_stream(manager, 'output', MPAS_STREAM_OUTPUT, 'x1.40962.init.nc', ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'scalars', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'initial_time', packages=packages, ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'xtime', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'latCell', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'lonCell', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'xCell', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'yCell', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'zCell', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'indexToCellID', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'latEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'lonEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'xEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'yEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'zEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'indexToEdgeID', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'latVertex', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'lonVertex', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'xVertex', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'yVertex', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'zVertex', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'indexToVertexID', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'cellsOnEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'nEdgesOnCell', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'nEdgesOnEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'edgesOnCell', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'edgesOnEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'weightsOnEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'dvEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'dcEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'angleEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'areaCell', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'areaTriangle', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'cellsOnCell', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'verticesOnCell', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'verticesOnEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'edgesOnVertex', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'cellsOnVertex', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'kiteAreasOnVertex', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'meshDensity', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'edgeNormalVectors', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'localVerticalUnitVectors', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'cellTangentPlane', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'fEdge', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'fVertex', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'ter', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'landmask', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'ivgtyp', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'mminlu', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'isltyp', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'snoalb', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'soiltemp', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'greenfrac', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'shdmin', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'shdmax', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'albedo12m', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'varsso', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'var2d', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'con', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'oa1', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'oa2', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'oa3', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'oa4', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'ol1', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'ol2', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'ol3', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'ol4', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'deriv_two', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'advCells', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'defc_a', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'defc_b', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'output', 'coeffs_reconstruct', ierr=ierr)
+   write(packages,'(a)') 'vertical_stage_out;met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'cf1', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'vertical_stage_out;met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'cf2', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'vertical_stage_out;met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'cf3', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'vertical_stage_out;met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'hx', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'vertical_stage_out;met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'zgrid', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'vertical_stage_out;met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'rdzw', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'vertical_stage_out;met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'dzu', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'vertical_stage_out;met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'rdzu', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'vertical_stage_out;met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'fzm', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'vertical_stage_out;met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'fzp', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'vertical_stage_out;met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'zxu', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'vertical_stage_out;met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'zz', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'vertical_stage_out;met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'zb', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'vertical_stage_out;met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'zb3', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'vertical_stage_out;met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'dss', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'u_init', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 't_init', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'qv_init', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'u', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'w', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'dz', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'dzs', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'zs', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'sh2o', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'smois', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'tslb', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'tmn', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'skintemp', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'sst', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'snow', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'snowc', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'snowh', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'xice', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'seaice', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'vegfra', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'sfc_albbck', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'xland', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'rho', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'theta', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'relhum', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'rho_base', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'theta_base', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'surface_pressure', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'precipw', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'h_oml_initial', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'u10', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'v10', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'q2', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 'rh2', packages=packages, ierr=ierr)
+   write(packages,'(a)') 'met_stage_out'
+   call MPAS_stream_mgr_add_field(manager, 'output', 't2m', packages=packages, ierr=ierr)
+   call MPAS_stream_mgr_set_property(manager, 'output', MPAS_STREAM_PROPERTY_IMMUTABLE, .true., ierr=ierr)
+
+   call MPAS_stream_mgr_create_stream(manager, 'surface', MPAS_STREAM_OUTPUT, 'x1.40962.sfc_update.nc', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'surface', 'xtime', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'surface', 'sst', ierr=ierr)
+   call MPAS_stream_mgr_add_field(manager, 'surface', 'xice', ierr=ierr)
+   call MPAS_stream_mgr_set_property(manager, 'surface', MPAS_STREAM_PROPERTY_IMMUTABLE, .true., ierr=ierr)
+
+end function init_atm_setup_immutable_streams
+
+
diff -uprN MPAS-Model-6.2/src/core_init_atmosphere/inc/structs_and_variables.inc MPAS-Model-6.2_mod/src/core_init_atmosphere/inc/structs_and_variables.inc
--- MPAS-Model-6.2/src/core_init_atmosphere/inc/structs_and_variables.inc	1970-01-01 09:00:00.000000000 +0900
+++ MPAS-Model-6.2_mod/src/core_init_atmosphere/inc/structs_and_variables.inc	2021-03-25 17:13:26.086667335 +0900
@@ -0,0 +1,5919 @@
+   subroutine init_atm_generate_pool_mesh(block, structPool, dimensionPool, packagePool)
+      use mpas_derived_types
+      use mpas_pool_routines
+      use mpas_io_units
+      use mpas_io, only : MPAS_REAL_FILLVAL, MPAS_INT_FILLVAL, MPAS_CHAR_FILLVAL
+      implicit none
+      type (block_type), intent(inout), pointer :: block
+      type (mpas_pool_type), intent(inout) :: structPool
+      type (mpas_pool_type), intent(inout) :: dimensionPool
+      type (mpas_pool_type), intent(in) :: packagePool
+
+      type (field0DReal), dimension(:), pointer :: r0Ptr
+      type (field1DReal), dimension(:), pointer :: r1Ptr
+      type (field2DReal), dimension(:), pointer :: r2Ptr
+      type (field3DReal), dimension(:), pointer :: r3Ptr
+      type (field4DReal), dimension(:), pointer :: r4Ptr
+      type (field5DReal), dimension(:), pointer :: r5Ptr
+      type (field0DInteger), dimension(:), pointer :: i0Ptr
+      type (field1DInteger), dimension(:), pointer :: i1Ptr
+      type (field2DInteger), dimension(:), pointer :: i2Ptr
+      type (field3DInteger), dimension(:), pointer :: i3Ptr
+      type (field0DChar), dimension(:), pointer :: c0Ptr
+      type (field1DChar), dimension(:), pointer :: c1Ptr
+
+      type (mpas_pool_type), pointer :: newSubPool
+      integer :: group_counter
+      logical :: group_started
+      integer :: group_start
+      integer :: index_counter
+      integer, pointer :: const_index
+
+      logical, pointer :: initial_condsActive
+      logical, pointer :: sfc_updateActive
+      logical, pointer :: gwd_stage_inActive
+      logical, pointer :: vertical_stage_inActive
+      logical, pointer :: vertical_stage_outActive
+      logical, pointer :: met_stage_inActive
+      logical, pointer :: met_stage_outActive
+
+
+      integer :: numConstituents
+
+      nullify(newSubPool)
+      group_counter = -1
+      group_started = .false.
+      group_start = -1
+      call mpas_pool_get_package(packagePool, 'initial_condsActive', initial_condsActive)
+      call mpas_pool_get_package(packagePool, 'sfc_updateActive', sfc_updateActive)
+      call mpas_pool_get_package(packagePool, 'gwd_stage_inActive', gwd_stage_inActive)
+      call mpas_pool_get_package(packagePool, 'vertical_stage_inActive', vertical_stage_inActive)
+      call mpas_pool_get_package(packagePool, 'vertical_stage_outActive', vertical_stage_outActive)
+      call mpas_pool_get_package(packagePool, 'met_stage_inActive', met_stage_inActive)
+      call mpas_pool_get_package(packagePool, 'met_stage_outActive', met_stage_outActive)
+
+      allocate(newSubPool)
+      call mpas_pool_create_pool(newSubPool)
+      call mpas_pool_add_subpool(structPool, 'mesh', newSubPool)
+      call mpas_pool_add_subpool(block % allStructs, 'mesh', newSubPool)
+
+! Define variable latCell
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'latCell'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'latCell', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'latCell', r1Ptr)
+
+! Define variable lonCell
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'lonCell'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'lonCell', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'lonCell', r1Ptr)
+
+! Define variable xCell
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'xCell'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'xCell', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'xCell', r1Ptr)
+
+! Define variable yCell
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'yCell'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'yCell', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'yCell', r1Ptr)
+
+! Define variable zCell
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'zCell'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'zCell', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'zCell', r1Ptr)
+
+! Define variable indexToCellID
+      allocate(i1Ptr(1))
+
+! Setting up time level 1
+      i1Ptr(1) % fieldName = 'indexToCellID'
+      i1Ptr(1) % isVarArray = .false.
+      i1Ptr(1) % isDecomposed = .true.
+      i1Ptr(1) % hasTimeDimension = .false.
+      i1Ptr(1) % isPersistent = .true.
+      i1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      i1Ptr(1) % dimNames(1) = 'nCells'
+     i1Ptr(1) % defaultValue = 0
+     i1Ptr(1) % defaultValue = 0
+     nullify(i1Ptr(1) % array)
+      nullify(i1Ptr(1) % next)
+      nullify(i1Ptr(1) % prev)
+      nullify(i1Ptr(1) % sendList)
+      nullify(i1Ptr(1) % recvList)
+      nullify(i1Ptr(1) % copyList)
+      allocate(i1Ptr(1) % attLists(1))
+      allocate(i1Ptr(1) % attLists(1) % attList)
+      i1Ptr(1) % attLists(1) % attList % attName = ''
+      i1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(i1Ptr(1) % attLists(1) % attList % next)
+      nullify(i1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(i1Ptr(1) % attLists(1) % attList % attValueRealA)
+      i1Ptr(1) % missingValue = MPAS_INT_FILLVAL
+      i1Ptr(1) % block => block
+
+      i1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'indexToCellID', i1Ptr)
+      call mpas_pool_add_field(block % allFields, 'indexToCellID', i1Ptr)
+
+! Define variable latEdge
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'latEdge'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nEdges'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'latEdge', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'latEdge', r1Ptr)
+
+! Define variable lonEdge
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'lonEdge'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nEdges'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'lonEdge', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'lonEdge', r1Ptr)
+
+! Define variable xEdge
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'xEdge'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nEdges'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'xEdge', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'xEdge', r1Ptr)
+
+! Define variable yEdge
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'yEdge'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nEdges'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'yEdge', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'yEdge', r1Ptr)
+
+! Define variable zEdge
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'zEdge'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nEdges'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'zEdge', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'zEdge', r1Ptr)
+
+! Define variable indexToEdgeID
+      allocate(i1Ptr(1))
+
+! Setting up time level 1
+      i1Ptr(1) % fieldName = 'indexToEdgeID'
+      i1Ptr(1) % isVarArray = .false.
+      i1Ptr(1) % isDecomposed = .true.
+      i1Ptr(1) % hasTimeDimension = .false.
+      i1Ptr(1) % isPersistent = .true.
+      i1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      i1Ptr(1) % dimNames(1) = 'nEdges'
+     i1Ptr(1) % defaultValue = 0
+     i1Ptr(1) % defaultValue = 0
+     nullify(i1Ptr(1) % array)
+      nullify(i1Ptr(1) % next)
+      nullify(i1Ptr(1) % prev)
+      nullify(i1Ptr(1) % sendList)
+      nullify(i1Ptr(1) % recvList)
+      nullify(i1Ptr(1) % copyList)
+      allocate(i1Ptr(1) % attLists(1))
+      allocate(i1Ptr(1) % attLists(1) % attList)
+      i1Ptr(1) % attLists(1) % attList % attName = ''
+      i1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(i1Ptr(1) % attLists(1) % attList % next)
+      nullify(i1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(i1Ptr(1) % attLists(1) % attList % attValueRealA)
+      i1Ptr(1) % missingValue = MPAS_INT_FILLVAL
+      i1Ptr(1) % block => block
+
+      i1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'indexToEdgeID', i1Ptr)
+      call mpas_pool_add_field(block % allFields, 'indexToEdgeID', i1Ptr)
+
+! Define variable latVertex
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'latVertex'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nVertices'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'latVertex', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'latVertex', r1Ptr)
+
+! Define variable lonVertex
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'lonVertex'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nVertices'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'lonVertex', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'lonVertex', r1Ptr)
+
+! Define variable xVertex
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'xVertex'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nVertices'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'xVertex', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'xVertex', r1Ptr)
+
+! Define variable yVertex
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'yVertex'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nVertices'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'yVertex', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'yVertex', r1Ptr)
+
+! Define variable zVertex
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'zVertex'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nVertices'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'zVertex', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'zVertex', r1Ptr)
+
+! Define variable indexToVertexID
+      allocate(i1Ptr(1))
+
+! Setting up time level 1
+      i1Ptr(1) % fieldName = 'indexToVertexID'
+      i1Ptr(1) % isVarArray = .false.
+      i1Ptr(1) % isDecomposed = .true.
+      i1Ptr(1) % hasTimeDimension = .false.
+      i1Ptr(1) % isPersistent = .true.
+      i1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      i1Ptr(1) % dimNames(1) = 'nVertices'
+     i1Ptr(1) % defaultValue = 0
+     i1Ptr(1) % defaultValue = 0
+     nullify(i1Ptr(1) % array)
+      nullify(i1Ptr(1) % next)
+      nullify(i1Ptr(1) % prev)
+      nullify(i1Ptr(1) % sendList)
+      nullify(i1Ptr(1) % recvList)
+      nullify(i1Ptr(1) % copyList)
+      allocate(i1Ptr(1) % attLists(1))
+      allocate(i1Ptr(1) % attLists(1) % attList)
+      i1Ptr(1) % attLists(1) % attList % attName = ''
+      i1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(i1Ptr(1) % attLists(1) % attList % next)
+      nullify(i1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(i1Ptr(1) % attLists(1) % attList % attValueRealA)
+      i1Ptr(1) % missingValue = MPAS_INT_FILLVAL
+      i1Ptr(1) % block => block
+
+      i1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'indexToVertexID', i1Ptr)
+      call mpas_pool_add_field(block % allFields, 'indexToVertexID', i1Ptr)
+
+! Define variable cellsOnEdge
+      allocate(i2Ptr(1))
+
+! Setting up time level 1
+      i2Ptr(1) % fieldName = 'cellsOnEdge'
+      i2Ptr(1) % isVarArray = .false.
+      i2Ptr(1) % isDecomposed = .true.
+      i2Ptr(1) % hasTimeDimension = .false.
+      i2Ptr(1) % isPersistent = .true.
+      i2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      i2Ptr(1) % dimNames(1) = 'TWO'
+      i2Ptr(1) % dimNames(2) = 'nEdges'
+     i2Ptr(1) % defaultValue = 0
+     i2Ptr(1) % defaultValue = 0
+     nullify(i2Ptr(1) % array)
+      nullify(i2Ptr(1) % next)
+      nullify(i2Ptr(1) % prev)
+      nullify(i2Ptr(1) % sendList)
+      nullify(i2Ptr(1) % recvList)
+      nullify(i2Ptr(1) % copyList)
+      allocate(i2Ptr(1) % attLists(1))
+      allocate(i2Ptr(1) % attLists(1) % attList)
+      i2Ptr(1) % attLists(1) % attList % attName = ''
+      i2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(i2Ptr(1) % attLists(1) % attList % next)
+      nullify(i2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(i2Ptr(1) % attLists(1) % attList % attValueRealA)
+      i2Ptr(1) % missingValue = MPAS_INT_FILLVAL
+      i2Ptr(1) % block => block
+
+      i2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'cellsOnEdge', i2Ptr)
+      call mpas_pool_add_field(block % allFields, 'cellsOnEdge', i2Ptr)
+
+! Define variable nEdgesOnCell
+      allocate(i1Ptr(1))
+
+! Setting up time level 1
+      i1Ptr(1) % fieldName = 'nEdgesOnCell'
+      i1Ptr(1) % isVarArray = .false.
+      i1Ptr(1) % isDecomposed = .true.
+      i1Ptr(1) % hasTimeDimension = .false.
+      i1Ptr(1) % isPersistent = .true.
+      i1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      i1Ptr(1) % dimNames(1) = 'nCells'
+     i1Ptr(1) % defaultValue = 0
+     i1Ptr(1) % defaultValue = 0
+     nullify(i1Ptr(1) % array)
+      nullify(i1Ptr(1) % next)
+      nullify(i1Ptr(1) % prev)
+      nullify(i1Ptr(1) % sendList)
+      nullify(i1Ptr(1) % recvList)
+      nullify(i1Ptr(1) % copyList)
+      allocate(i1Ptr(1) % attLists(1))
+      allocate(i1Ptr(1) % attLists(1) % attList)
+      i1Ptr(1) % attLists(1) % attList % attName = ''
+      i1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(i1Ptr(1) % attLists(1) % attList % next)
+      nullify(i1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(i1Ptr(1) % attLists(1) % attList % attValueRealA)
+      i1Ptr(1) % missingValue = MPAS_INT_FILLVAL
+      i1Ptr(1) % block => block
+
+      i1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'nEdgesOnCell', i1Ptr)
+      call mpas_pool_add_field(block % allFields, 'nEdgesOnCell', i1Ptr)
+
+! Define variable nEdgesOnEdge
+      allocate(i1Ptr(1))
+
+! Setting up time level 1
+      i1Ptr(1) % fieldName = 'nEdgesOnEdge'
+      i1Ptr(1) % isVarArray = .false.
+      i1Ptr(1) % isDecomposed = .true.
+      i1Ptr(1) % hasTimeDimension = .false.
+      i1Ptr(1) % isPersistent = .true.
+      i1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      i1Ptr(1) % dimNames(1) = 'nEdges'
+     i1Ptr(1) % defaultValue = 0
+     i1Ptr(1) % defaultValue = 0
+     nullify(i1Ptr(1) % array)
+      nullify(i1Ptr(1) % next)
+      nullify(i1Ptr(1) % prev)
+      nullify(i1Ptr(1) % sendList)
+      nullify(i1Ptr(1) % recvList)
+      nullify(i1Ptr(1) % copyList)
+      allocate(i1Ptr(1) % attLists(1))
+      allocate(i1Ptr(1) % attLists(1) % attList)
+      i1Ptr(1) % attLists(1) % attList % attName = ''
+      i1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(i1Ptr(1) % attLists(1) % attList % next)
+      nullify(i1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(i1Ptr(1) % attLists(1) % attList % attValueRealA)
+      i1Ptr(1) % missingValue = MPAS_INT_FILLVAL
+      i1Ptr(1) % block => block
+
+      i1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'nEdgesOnEdge', i1Ptr)
+      call mpas_pool_add_field(block % allFields, 'nEdgesOnEdge', i1Ptr)
+
+! Define variable edgesOnCell
+      allocate(i2Ptr(1))
+
+! Setting up time level 1
+      i2Ptr(1) % fieldName = 'edgesOnCell'
+      i2Ptr(1) % isVarArray = .false.
+      i2Ptr(1) % isDecomposed = .true.
+      i2Ptr(1) % hasTimeDimension = .false.
+      i2Ptr(1) % isPersistent = .true.
+      i2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      i2Ptr(1) % dimNames(1) = 'maxEdges'
+      i2Ptr(1) % dimNames(2) = 'nCells'
+     i2Ptr(1) % defaultValue = 0
+     i2Ptr(1) % defaultValue = 0
+     nullify(i2Ptr(1) % array)
+      nullify(i2Ptr(1) % next)
+      nullify(i2Ptr(1) % prev)
+      nullify(i2Ptr(1) % sendList)
+      nullify(i2Ptr(1) % recvList)
+      nullify(i2Ptr(1) % copyList)
+      allocate(i2Ptr(1) % attLists(1))
+      allocate(i2Ptr(1) % attLists(1) % attList)
+      i2Ptr(1) % attLists(1) % attList % attName = ''
+      i2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(i2Ptr(1) % attLists(1) % attList % next)
+      nullify(i2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(i2Ptr(1) % attLists(1) % attList % attValueRealA)
+      i2Ptr(1) % missingValue = MPAS_INT_FILLVAL
+      i2Ptr(1) % block => block
+
+      i2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'edgesOnCell', i2Ptr)
+      call mpas_pool_add_field(block % allFields, 'edgesOnCell', i2Ptr)
+
+! Define variable edgesOnEdge
+      allocate(i2Ptr(1))
+
+! Setting up time level 1
+      i2Ptr(1) % fieldName = 'edgesOnEdge'
+      i2Ptr(1) % isVarArray = .false.
+      i2Ptr(1) % isDecomposed = .true.
+      i2Ptr(1) % hasTimeDimension = .false.
+      i2Ptr(1) % isPersistent = .true.
+      i2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      i2Ptr(1) % dimNames(1) = 'maxEdges2'
+      i2Ptr(1) % dimNames(2) = 'nEdges'
+     i2Ptr(1) % defaultValue = 0
+     i2Ptr(1) % defaultValue = 0
+     nullify(i2Ptr(1) % array)
+      nullify(i2Ptr(1) % next)
+      nullify(i2Ptr(1) % prev)
+      nullify(i2Ptr(1) % sendList)
+      nullify(i2Ptr(1) % recvList)
+      nullify(i2Ptr(1) % copyList)
+      allocate(i2Ptr(1) % attLists(1))
+      allocate(i2Ptr(1) % attLists(1) % attList)
+      i2Ptr(1) % attLists(1) % attList % attName = ''
+      i2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(i2Ptr(1) % attLists(1) % attList % next)
+      nullify(i2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(i2Ptr(1) % attLists(1) % attList % attValueRealA)
+      i2Ptr(1) % missingValue = MPAS_INT_FILLVAL
+      i2Ptr(1) % block => block
+
+      i2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'edgesOnEdge', i2Ptr)
+      call mpas_pool_add_field(block % allFields, 'edgesOnEdge', i2Ptr)
+
+! Define variable weightsOnEdge
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'weightsOnEdge'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .false.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'maxEdges2'
+      r2Ptr(1) % dimNames(2) = 'nEdges'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'weightsOnEdge', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'weightsOnEdge', r2Ptr)
+
+! Define variable dvEdge
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'dvEdge'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nEdges'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'dvEdge', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'dvEdge', r1Ptr)
+
+! Define variable dcEdge
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'dcEdge'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nEdges'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'dcEdge', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'dcEdge', r1Ptr)
+
+! Define variable angleEdge
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'angleEdge'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nEdges'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'angleEdge', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'angleEdge', r1Ptr)
+
+! Define variable areaCell
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'areaCell'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'areaCell', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'areaCell', r1Ptr)
+
+! Define variable areaTriangle
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'areaTriangle'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nVertices'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'areaTriangle', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'areaTriangle', r1Ptr)
+
+! Define variable edgeNormalVectors
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'edgeNormalVectors'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .false.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'R3'
+      r2Ptr(1) % dimNames(2) = 'nEdges'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'edgeNormalVectors', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'edgeNormalVectors', r2Ptr)
+
+! Define variable localVerticalUnitVectors
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'localVerticalUnitVectors'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .false.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'R3'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'localVerticalUnitVectors', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'localVerticalUnitVectors', r2Ptr)
+
+! Define variable cellTangentPlane
+      allocate(r3Ptr(1))
+
+! Setting up time level 1
+      r3Ptr(1) % fieldName = 'cellTangentPlane'
+      r3Ptr(1) % isVarArray = .false.
+      r3Ptr(1) % isDecomposed = .true.
+      r3Ptr(1) % hasTimeDimension = .false.
+      r3Ptr(1) % isPersistent = .true.
+      r3Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r3Ptr(1) % dimNames(1) = 'R3'
+      r3Ptr(1) % dimNames(2) = 'TWO'
+      r3Ptr(1) % dimNames(3) = 'nCells'
+     r3Ptr(1) % defaultValue = 0.0
+     r3Ptr(1) % defaultValue = 0.0
+     nullify(r3Ptr(1) % array)
+      nullify(r3Ptr(1) % next)
+      nullify(r3Ptr(1) % prev)
+      nullify(r3Ptr(1) % sendList)
+      nullify(r3Ptr(1) % recvList)
+      nullify(r3Ptr(1) % copyList)
+      allocate(r3Ptr(1) % attLists(1))
+      allocate(r3Ptr(1) % attLists(1) % attList)
+      r3Ptr(1) % attLists(1) % attList % attName = ''
+      r3Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r3Ptr(1) % attLists(1) % attList % next)
+      nullify(r3Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r3Ptr(1) % attLists(1) % attList % attValueRealA)
+      r3Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r3Ptr(1) % block => block
+
+      r3Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'cellTangentPlane', r3Ptr)
+      call mpas_pool_add_field(block % allFields, 'cellTangentPlane', r3Ptr)
+
+! Define variable cellsOnCell
+      allocate(i2Ptr(1))
+
+! Setting up time level 1
+      i2Ptr(1) % fieldName = 'cellsOnCell'
+      i2Ptr(1) % isVarArray = .false.
+      i2Ptr(1) % isDecomposed = .true.
+      i2Ptr(1) % hasTimeDimension = .false.
+      i2Ptr(1) % isPersistent = .true.
+      i2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      i2Ptr(1) % dimNames(1) = 'maxEdges'
+      i2Ptr(1) % dimNames(2) = 'nCells'
+     i2Ptr(1) % defaultValue = 0
+     i2Ptr(1) % defaultValue = 0
+     nullify(i2Ptr(1) % array)
+      nullify(i2Ptr(1) % next)
+      nullify(i2Ptr(1) % prev)
+      nullify(i2Ptr(1) % sendList)
+      nullify(i2Ptr(1) % recvList)
+      nullify(i2Ptr(1) % copyList)
+      allocate(i2Ptr(1) % attLists(1))
+      allocate(i2Ptr(1) % attLists(1) % attList)
+      i2Ptr(1) % attLists(1) % attList % attName = ''
+      i2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(i2Ptr(1) % attLists(1) % attList % next)
+      nullify(i2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(i2Ptr(1) % attLists(1) % attList % attValueRealA)
+      i2Ptr(1) % missingValue = MPAS_INT_FILLVAL
+      i2Ptr(1) % block => block
+
+      i2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'cellsOnCell', i2Ptr)
+      call mpas_pool_add_field(block % allFields, 'cellsOnCell', i2Ptr)
+
+! Define variable verticesOnCell
+      allocate(i2Ptr(1))
+
+! Setting up time level 1
+      i2Ptr(1) % fieldName = 'verticesOnCell'
+      i2Ptr(1) % isVarArray = .false.
+      i2Ptr(1) % isDecomposed = .true.
+      i2Ptr(1) % hasTimeDimension = .false.
+      i2Ptr(1) % isPersistent = .true.
+      i2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      i2Ptr(1) % dimNames(1) = 'maxEdges'
+      i2Ptr(1) % dimNames(2) = 'nCells'
+     i2Ptr(1) % defaultValue = 0
+     i2Ptr(1) % defaultValue = 0
+     nullify(i2Ptr(1) % array)
+      nullify(i2Ptr(1) % next)
+      nullify(i2Ptr(1) % prev)
+      nullify(i2Ptr(1) % sendList)
+      nullify(i2Ptr(1) % recvList)
+      nullify(i2Ptr(1) % copyList)
+      allocate(i2Ptr(1) % attLists(1))
+      allocate(i2Ptr(1) % attLists(1) % attList)
+      i2Ptr(1) % attLists(1) % attList % attName = ''
+      i2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(i2Ptr(1) % attLists(1) % attList % next)
+      nullify(i2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(i2Ptr(1) % attLists(1) % attList % attValueRealA)
+      i2Ptr(1) % missingValue = MPAS_INT_FILLVAL
+      i2Ptr(1) % block => block
+
+      i2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'verticesOnCell', i2Ptr)
+      call mpas_pool_add_field(block % allFields, 'verticesOnCell', i2Ptr)
+
+! Define variable verticesOnEdge
+      allocate(i2Ptr(1))
+
+! Setting up time level 1
+      i2Ptr(1) % fieldName = 'verticesOnEdge'
+      i2Ptr(1) % isVarArray = .false.
+      i2Ptr(1) % isDecomposed = .true.
+      i2Ptr(1) % hasTimeDimension = .false.
+      i2Ptr(1) % isPersistent = .true.
+      i2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      i2Ptr(1) % dimNames(1) = 'TWO'
+      i2Ptr(1) % dimNames(2) = 'nEdges'
+     i2Ptr(1) % defaultValue = 0
+     i2Ptr(1) % defaultValue = 0
+     nullify(i2Ptr(1) % array)
+      nullify(i2Ptr(1) % next)
+      nullify(i2Ptr(1) % prev)
+      nullify(i2Ptr(1) % sendList)
+      nullify(i2Ptr(1) % recvList)
+      nullify(i2Ptr(1) % copyList)
+      allocate(i2Ptr(1) % attLists(1))
+      allocate(i2Ptr(1) % attLists(1) % attList)
+      i2Ptr(1) % attLists(1) % attList % attName = ''
+      i2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(i2Ptr(1) % attLists(1) % attList % next)
+      nullify(i2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(i2Ptr(1) % attLists(1) % attList % attValueRealA)
+      i2Ptr(1) % missingValue = MPAS_INT_FILLVAL
+      i2Ptr(1) % block => block
+
+      i2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'verticesOnEdge', i2Ptr)
+      call mpas_pool_add_field(block % allFields, 'verticesOnEdge', i2Ptr)
+
+! Define variable edgesOnVertex
+      allocate(i2Ptr(1))
+
+! Setting up time level 1
+      i2Ptr(1) % fieldName = 'edgesOnVertex'
+      i2Ptr(1) % isVarArray = .false.
+      i2Ptr(1) % isDecomposed = .true.
+      i2Ptr(1) % hasTimeDimension = .false.
+      i2Ptr(1) % isPersistent = .true.
+      i2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      i2Ptr(1) % dimNames(1) = 'vertexDegree'
+      i2Ptr(1) % dimNames(2) = 'nVertices'
+     i2Ptr(1) % defaultValue = 0
+     i2Ptr(1) % defaultValue = 0
+     nullify(i2Ptr(1) % array)
+      nullify(i2Ptr(1) % next)
+      nullify(i2Ptr(1) % prev)
+      nullify(i2Ptr(1) % sendList)
+      nullify(i2Ptr(1) % recvList)
+      nullify(i2Ptr(1) % copyList)
+      allocate(i2Ptr(1) % attLists(1))
+      allocate(i2Ptr(1) % attLists(1) % attList)
+      i2Ptr(1) % attLists(1) % attList % attName = ''
+      i2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(i2Ptr(1) % attLists(1) % attList % next)
+      nullify(i2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(i2Ptr(1) % attLists(1) % attList % attValueRealA)
+      i2Ptr(1) % missingValue = MPAS_INT_FILLVAL
+      i2Ptr(1) % block => block
+
+      i2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'edgesOnVertex', i2Ptr)
+      call mpas_pool_add_field(block % allFields, 'edgesOnVertex', i2Ptr)
+
+! Define variable cellsOnVertex
+      allocate(i2Ptr(1))
+
+! Setting up time level 1
+      i2Ptr(1) % fieldName = 'cellsOnVertex'
+      i2Ptr(1) % isVarArray = .false.
+      i2Ptr(1) % isDecomposed = .true.
+      i2Ptr(1) % hasTimeDimension = .false.
+      i2Ptr(1) % isPersistent = .true.
+      i2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      i2Ptr(1) % dimNames(1) = 'vertexDegree'
+      i2Ptr(1) % dimNames(2) = 'nVertices'
+     i2Ptr(1) % defaultValue = 0
+     i2Ptr(1) % defaultValue = 0
+     nullify(i2Ptr(1) % array)
+      nullify(i2Ptr(1) % next)
+      nullify(i2Ptr(1) % prev)
+      nullify(i2Ptr(1) % sendList)
+      nullify(i2Ptr(1) % recvList)
+      nullify(i2Ptr(1) % copyList)
+      allocate(i2Ptr(1) % attLists(1))
+      allocate(i2Ptr(1) % attLists(1) % attList)
+      i2Ptr(1) % attLists(1) % attList % attName = ''
+      i2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(i2Ptr(1) % attLists(1) % attList % next)
+      nullify(i2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(i2Ptr(1) % attLists(1) % attList % attValueRealA)
+      i2Ptr(1) % missingValue = MPAS_INT_FILLVAL
+      i2Ptr(1) % block => block
+
+      i2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'cellsOnVertex', i2Ptr)
+      call mpas_pool_add_field(block % allFields, 'cellsOnVertex', i2Ptr)
+
+! Define variable kiteAreasOnVertex
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'kiteAreasOnVertex'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .false.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'vertexDegree'
+      r2Ptr(1) % dimNames(2) = 'nVertices'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'kiteAreasOnVertex', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'kiteAreasOnVertex', r2Ptr)
+
+! Define variable fEdge
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'fEdge'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nEdges'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'fEdge', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'fEdge', r1Ptr)
+
+! Define variable fVertex
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'fVertex'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nVertices'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'fVertex', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'fVertex', r1Ptr)
+
+! Define variable meshDensity
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'meshDensity'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'meshDensity', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'meshDensity', r1Ptr)
+
+! Define variable cf1
+      allocate(r0Ptr(1))
+
+! Setting up time level 1
+      r0Ptr(1) % fieldName = 'cf1'
+      r0Ptr(1) % isVarArray = .false.
+      r0Ptr(1) % isDecomposed = .false.
+      r0Ptr(1) % hasTimeDimension = .false.
+     r0Ptr(1) % defaultValue = 0.0
+     r0Ptr(1) % defaultValue = 0.0
+     r0Ptr(1) % scalar = 0.0
+      nullify(r0Ptr(1) % next)
+      nullify(r0Ptr(1) % prev)
+      nullify(r0Ptr(1) % sendList)
+      nullify(r0Ptr(1) % recvList)
+      nullify(r0Ptr(1) % copyList)
+      allocate(r0Ptr(1) % attLists(1))
+      allocate(r0Ptr(1) % attLists(1) % attList)
+      r0Ptr(1) % attLists(1) % attList % attName = ''
+      r0Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r0Ptr(1) % attLists(1) % attList % next)
+      nullify(r0Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r0Ptr(1) % attLists(1) % attList % attValueRealA)
+      r0Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r0Ptr(1) % block => block
+
+      r0Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'cf1', r0Ptr)
+      call mpas_pool_add_field(block % allFields, 'cf1', r0Ptr)
+
+! Define variable cf2
+      allocate(r0Ptr(1))
+
+! Setting up time level 1
+      r0Ptr(1) % fieldName = 'cf2'
+      r0Ptr(1) % isVarArray = .false.
+      r0Ptr(1) % isDecomposed = .false.
+      r0Ptr(1) % hasTimeDimension = .false.
+     r0Ptr(1) % defaultValue = 0.0
+     r0Ptr(1) % defaultValue = 0.0
+     r0Ptr(1) % scalar = 0.0
+      nullify(r0Ptr(1) % next)
+      nullify(r0Ptr(1) % prev)
+      nullify(r0Ptr(1) % sendList)
+      nullify(r0Ptr(1) % recvList)
+      nullify(r0Ptr(1) % copyList)
+      allocate(r0Ptr(1) % attLists(1))
+      allocate(r0Ptr(1) % attLists(1) % attList)
+      r0Ptr(1) % attLists(1) % attList % attName = ''
+      r0Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r0Ptr(1) % attLists(1) % attList % next)
+      nullify(r0Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r0Ptr(1) % attLists(1) % attList % attValueRealA)
+      r0Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r0Ptr(1) % block => block
+
+      r0Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'cf2', r0Ptr)
+      call mpas_pool_add_field(block % allFields, 'cf2', r0Ptr)
+
+! Define variable cf3
+      allocate(r0Ptr(1))
+
+! Setting up time level 1
+      r0Ptr(1) % fieldName = 'cf3'
+      r0Ptr(1) % isVarArray = .false.
+      r0Ptr(1) % isDecomposed = .false.
+      r0Ptr(1) % hasTimeDimension = .false.
+     r0Ptr(1) % defaultValue = 0.0
+     r0Ptr(1) % defaultValue = 0.0
+     r0Ptr(1) % scalar = 0.0
+      nullify(r0Ptr(1) % next)
+      nullify(r0Ptr(1) % prev)
+      nullify(r0Ptr(1) % sendList)
+      nullify(r0Ptr(1) % recvList)
+      nullify(r0Ptr(1) % copyList)
+      allocate(r0Ptr(1) % attLists(1))
+      allocate(r0Ptr(1) % attLists(1) % attList)
+      r0Ptr(1) % attLists(1) % attList % attName = ''
+      r0Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r0Ptr(1) % attLists(1) % attList % next)
+      nullify(r0Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r0Ptr(1) % attLists(1) % attList % attValueRealA)
+      r0Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r0Ptr(1) % block => block
+
+      r0Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'cf3', r0Ptr)
+      call mpas_pool_add_field(block % allFields, 'cf3', r0Ptr)
+
+! Define variable ter
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'ter'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'ter', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'ter', r1Ptr)
+
+! Define variable landmask
+      allocate(i1Ptr(1))
+
+! Setting up time level 1
+      i1Ptr(1) % fieldName = 'landmask'
+      i1Ptr(1) % isVarArray = .false.
+      i1Ptr(1) % isDecomposed = .true.
+      i1Ptr(1) % hasTimeDimension = .false.
+      i1Ptr(1) % isPersistent = .true.
+      i1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      i1Ptr(1) % dimNames(1) = 'nCells'
+     i1Ptr(1) % defaultValue = 0
+     i1Ptr(1) % defaultValue = 0
+     nullify(i1Ptr(1) % array)
+      nullify(i1Ptr(1) % next)
+      nullify(i1Ptr(1) % prev)
+      nullify(i1Ptr(1) % sendList)
+      nullify(i1Ptr(1) % recvList)
+      nullify(i1Ptr(1) % copyList)
+      allocate(i1Ptr(1) % attLists(1))
+      allocate(i1Ptr(1) % attLists(1) % attList)
+      i1Ptr(1) % attLists(1) % attList % attName = ''
+      i1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(i1Ptr(1) % attLists(1) % attList % next)
+      nullify(i1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(i1Ptr(1) % attLists(1) % attList % attValueRealA)
+      i1Ptr(1) % missingValue = MPAS_INT_FILLVAL
+      i1Ptr(1) % block => block
+
+      i1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'landmask', i1Ptr)
+      call mpas_pool_add_field(block % allFields, 'landmask', i1Ptr)
+
+! Define variable ivgtyp
+      allocate(i1Ptr(1))
+
+! Setting up time level 1
+      i1Ptr(1) % fieldName = 'ivgtyp'
+      i1Ptr(1) % isVarArray = .false.
+      i1Ptr(1) % isDecomposed = .true.
+      i1Ptr(1) % hasTimeDimension = .false.
+      i1Ptr(1) % isPersistent = .true.
+      i1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      i1Ptr(1) % dimNames(1) = 'nCells'
+     i1Ptr(1) % defaultValue = 0
+     i1Ptr(1) % defaultValue = 0
+     nullify(i1Ptr(1) % array)
+      nullify(i1Ptr(1) % next)
+      nullify(i1Ptr(1) % prev)
+      nullify(i1Ptr(1) % sendList)
+      nullify(i1Ptr(1) % recvList)
+      nullify(i1Ptr(1) % copyList)
+      allocate(i1Ptr(1) % attLists(1))
+      allocate(i1Ptr(1) % attLists(1) % attList)
+      i1Ptr(1) % attLists(1) % attList % attName = ''
+      i1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(i1Ptr(1) % attLists(1) % attList % next)
+      nullify(i1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(i1Ptr(1) % attLists(1) % attList % attValueRealA)
+      i1Ptr(1) % missingValue = MPAS_INT_FILLVAL
+      i1Ptr(1) % block => block
+
+      i1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'lu_index', i1Ptr)
+      call mpas_pool_add_field(block % allFields, 'ivgtyp', i1Ptr)
+
+! Define variable mminlu
+      allocate(c0Ptr(1))
+
+! Setting up time level 1
+      c0Ptr(1) % fieldName = 'mminlu'
+      c0Ptr(1) % isVarArray = .false.
+      c0Ptr(1) % isDecomposed = .false.
+      c0Ptr(1) % hasTimeDimension = .false.
+     c0Ptr(1) % defaultValue = ''
+     c0Ptr(1) % defaultValue = ''
+     c0Ptr(1) % scalar = ''
+      nullify(c0Ptr(1) % next)
+      nullify(c0Ptr(1) % prev)
+      nullify(c0Ptr(1) % sendList)
+      nullify(c0Ptr(1) % recvList)
+      nullify(c0Ptr(1) % copyList)
+      allocate(c0Ptr(1) % attLists(1))
+      allocate(c0Ptr(1) % attLists(1) % attList)
+      c0Ptr(1) % attLists(1) % attList % attName = ''
+      c0Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(c0Ptr(1) % attLists(1) % attList % next)
+      nullify(c0Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(c0Ptr(1) % attLists(1) % attList % attValueRealA)
+      c0Ptr(1) % missingValue = MPAS_CHAR_FILLVAL
+      c0Ptr(1) % block => block
+
+      c0Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'mminlu', c0Ptr)
+      call mpas_pool_add_field(block % allFields, 'mminlu', c0Ptr)
+
+! Define variable isltyp
+      allocate(i1Ptr(1))
+
+! Setting up time level 1
+      i1Ptr(1) % fieldName = 'isltyp'
+      i1Ptr(1) % isVarArray = .false.
+      i1Ptr(1) % isDecomposed = .true.
+      i1Ptr(1) % hasTimeDimension = .false.
+      i1Ptr(1) % isPersistent = .true.
+      i1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      i1Ptr(1) % dimNames(1) = 'nCells'
+     i1Ptr(1) % defaultValue = 0
+     i1Ptr(1) % defaultValue = 0
+     nullify(i1Ptr(1) % array)
+      nullify(i1Ptr(1) % next)
+      nullify(i1Ptr(1) % prev)
+      nullify(i1Ptr(1) % sendList)
+      nullify(i1Ptr(1) % recvList)
+      nullify(i1Ptr(1) % copyList)
+      allocate(i1Ptr(1) % attLists(1))
+      allocate(i1Ptr(1) % attLists(1) % attList)
+      i1Ptr(1) % attLists(1) % attList % attName = ''
+      i1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(i1Ptr(1) % attLists(1) % attList % next)
+      nullify(i1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(i1Ptr(1) % attLists(1) % attList % attValueRealA)
+      i1Ptr(1) % missingValue = MPAS_INT_FILLVAL
+      i1Ptr(1) % block => block
+
+      i1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'soilcat_top', i1Ptr)
+      call mpas_pool_add_field(block % allFields, 'isltyp', i1Ptr)
+
+! Define variable snoalb
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'snoalb'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'snoalb', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'snoalb', r1Ptr)
+
+! Define variable soiltemp
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'soiltemp'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'soiltemp', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'soiltemp', r1Ptr)
+
+! Define variable greenfrac
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'greenfrac'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .false.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nMonths'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'greenfrac', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'greenfrac', r2Ptr)
+
+! Define variable shdmin
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'shdmin'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'shdmin', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'shdmin', r1Ptr)
+
+! Define variable shdmax
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'shdmax'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'shdmax', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'shdmax', r1Ptr)
+
+! Define variable albedo12m
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'albedo12m'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .false.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nMonths'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'albedo12m', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'albedo12m', r2Ptr)
+
+! Define variable varsso
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'varsso'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'varsso', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'varsso', r1Ptr)
+
+! Define variable var2d
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'var2d'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'var2d', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'var2d', r1Ptr)
+
+! Define variable con
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'con'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'con', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'con', r1Ptr)
+
+! Define variable oa1
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'oa1'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'oa1', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'oa1', r1Ptr)
+
+! Define variable oa2
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'oa2'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'oa2', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'oa2', r1Ptr)
+
+! Define variable oa3
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'oa3'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'oa3', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'oa3', r1Ptr)
+
+! Define variable oa4
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'oa4'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'oa4', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'oa4', r1Ptr)
+
+! Define variable ol1
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'ol1'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'ol1', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'ol1', r1Ptr)
+
+! Define variable ol2
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'ol2'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'ol2', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'ol2', r1Ptr)
+
+! Define variable ol3
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'ol3'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'ol3', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'ol3', r1Ptr)
+
+! Define variable ol4
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'ol4'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'ol4', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'ol4', r1Ptr)
+
+! Define variable hx
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'hx'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .false.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevelsP1'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'hx', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'hx', r2Ptr)
+
+! Define variable zgrid
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'zgrid'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .false.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevelsP1'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'zgrid', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'zgrid', r2Ptr)
+
+! Define variable rdzw
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'rdzw'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .false.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nVertLevels'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'rdzw', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'rdzw', r1Ptr)
+
+! Define variable dzu
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'dzu'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .false.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nVertLevels'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'dzu', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'dzu', r1Ptr)
+
+! Define variable rdzu
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'rdzu'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .false.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nVertLevels'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'rdzu', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'rdzu', r1Ptr)
+
+! Define variable fzm
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'fzm'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .false.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nVertLevels'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'fzm', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'fzm', r1Ptr)
+
+! Define variable fzp
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'fzp'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .false.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nVertLevels'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'fzp', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'fzp', r1Ptr)
+
+! Define variable zxu
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'zxu'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .false.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nEdges'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'zxu', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'zxu', r2Ptr)
+
+! Define variable zz
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'zz'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .false.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'zz', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'zz', r2Ptr)
+
+! Define variable zb
+      allocate(r3Ptr(1))
+
+! Setting up time level 1
+      r3Ptr(1) % fieldName = 'zb'
+      r3Ptr(1) % isVarArray = .false.
+      r3Ptr(1) % isDecomposed = .true.
+      r3Ptr(1) % hasTimeDimension = .false.
+      r3Ptr(1) % isPersistent = .true.
+      r3Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r3Ptr(1) % dimNames(1) = 'nVertLevelsP1'
+      r3Ptr(1) % dimNames(2) = 'TWO'
+      r3Ptr(1) % dimNames(3) = 'nEdges'
+     r3Ptr(1) % defaultValue = 0.0
+     r3Ptr(1) % defaultValue = 0.0
+     nullify(r3Ptr(1) % array)
+      nullify(r3Ptr(1) % next)
+      nullify(r3Ptr(1) % prev)
+      nullify(r3Ptr(1) % sendList)
+      nullify(r3Ptr(1) % recvList)
+      nullify(r3Ptr(1) % copyList)
+      allocate(r3Ptr(1) % attLists(1))
+      allocate(r3Ptr(1) % attLists(1) % attList)
+      r3Ptr(1) % attLists(1) % attList % attName = ''
+      r3Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r3Ptr(1) % attLists(1) % attList % next)
+      nullify(r3Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r3Ptr(1) % attLists(1) % attList % attValueRealA)
+      r3Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r3Ptr(1) % block => block
+
+      r3Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'zb', r3Ptr)
+      call mpas_pool_add_field(block % allFields, 'zb', r3Ptr)
+
+! Define variable zb3
+      allocate(r3Ptr(1))
+
+! Setting up time level 1
+      r3Ptr(1) % fieldName = 'zb3'
+      r3Ptr(1) % isVarArray = .false.
+      r3Ptr(1) % isDecomposed = .true.
+      r3Ptr(1) % hasTimeDimension = .false.
+      r3Ptr(1) % isPersistent = .true.
+      r3Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r3Ptr(1) % dimNames(1) = 'nVertLevelsP1'
+      r3Ptr(1) % dimNames(2) = 'TWO'
+      r3Ptr(1) % dimNames(3) = 'nEdges'
+     r3Ptr(1) % defaultValue = 0.0
+     r3Ptr(1) % defaultValue = 0.0
+     nullify(r3Ptr(1) % array)
+      nullify(r3Ptr(1) % next)
+      nullify(r3Ptr(1) % prev)
+      nullify(r3Ptr(1) % sendList)
+      nullify(r3Ptr(1) % recvList)
+      nullify(r3Ptr(1) % copyList)
+      allocate(r3Ptr(1) % attLists(1))
+      allocate(r3Ptr(1) % attLists(1) % attList)
+      r3Ptr(1) % attLists(1) % attList % attName = ''
+      r3Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r3Ptr(1) % attLists(1) % attList % next)
+      nullify(r3Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r3Ptr(1) % attLists(1) % attList % attValueRealA)
+      r3Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r3Ptr(1) % block => block
+
+      r3Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'zb3', r3Ptr)
+      call mpas_pool_add_field(block % allFields, 'zb3', r3Ptr)
+
+! Define variable dss
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'dss'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .false.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'dss', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'dss', r2Ptr)
+
+! Define variable u_init
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'u_init'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .false.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nVertLevels'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'u_init', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'u_init', r1Ptr)
+
+! Define variable t_init
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 't_init'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .false.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 't_init', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 't_init', r2Ptr)
+
+! Define variable qv_init
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'qv_init'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .false.
+      r1Ptr(1) % hasTimeDimension = .false.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nVertLevels'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'qv_init', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'qv_init', r1Ptr)
+
+! Define variable deriv_two
+      allocate(r3Ptr(1))
+
+! Setting up time level 1
+      r3Ptr(1) % fieldName = 'deriv_two'
+      r3Ptr(1) % isVarArray = .false.
+      r3Ptr(1) % isDecomposed = .true.
+      r3Ptr(1) % hasTimeDimension = .false.
+      r3Ptr(1) % isPersistent = .true.
+      r3Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r3Ptr(1) % dimNames(1) = 'FIFTEEN'
+      r3Ptr(1) % dimNames(2) = 'TWO'
+      r3Ptr(1) % dimNames(3) = 'nEdges'
+     r3Ptr(1) % defaultValue = 0.0
+     r3Ptr(1) % defaultValue = 0.0
+     nullify(r3Ptr(1) % array)
+      nullify(r3Ptr(1) % next)
+      nullify(r3Ptr(1) % prev)
+      nullify(r3Ptr(1) % sendList)
+      nullify(r3Ptr(1) % recvList)
+      nullify(r3Ptr(1) % copyList)
+      allocate(r3Ptr(1) % attLists(1))
+      allocate(r3Ptr(1) % attLists(1) % attList)
+      r3Ptr(1) % attLists(1) % attList % attName = ''
+      r3Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r3Ptr(1) % attLists(1) % attList % next)
+      nullify(r3Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r3Ptr(1) % attLists(1) % attList % attValueRealA)
+      r3Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r3Ptr(1) % block => block
+
+      r3Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'deriv_two', r3Ptr)
+      call mpas_pool_add_field(block % allFields, 'deriv_two', r3Ptr)
+
+! Define variable advCells
+      allocate(i2Ptr(1))
+
+! Setting up time level 1
+      i2Ptr(1) % fieldName = 'advCells'
+      i2Ptr(1) % isVarArray = .false.
+      i2Ptr(1) % isDecomposed = .true.
+      i2Ptr(1) % hasTimeDimension = .false.
+      i2Ptr(1) % isPersistent = .true.
+      i2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      i2Ptr(1) % dimNames(1) = 'TWENTYONE'
+      i2Ptr(1) % dimNames(2) = 'nCells'
+     i2Ptr(1) % defaultValue = 0
+     i2Ptr(1) % defaultValue = 0
+     nullify(i2Ptr(1) % array)
+      nullify(i2Ptr(1) % next)
+      nullify(i2Ptr(1) % prev)
+      nullify(i2Ptr(1) % sendList)
+      nullify(i2Ptr(1) % recvList)
+      nullify(i2Ptr(1) % copyList)
+      allocate(i2Ptr(1) % attLists(1))
+      allocate(i2Ptr(1) % attLists(1) % attList)
+      i2Ptr(1) % attLists(1) % attList % attName = ''
+      i2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(i2Ptr(1) % attLists(1) % attList % next)
+      nullify(i2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(i2Ptr(1) % attLists(1) % attList % attValueRealA)
+      i2Ptr(1) % missingValue = MPAS_INT_FILLVAL
+      i2Ptr(1) % block => block
+
+      i2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'advCells', i2Ptr)
+      call mpas_pool_add_field(block % allFields, 'advCells', i2Ptr)
+
+! Define variable defc_a
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'defc_a'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .false.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'maxEdges'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'defc_a', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'defc_a', r2Ptr)
+
+! Define variable defc_b
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'defc_b'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .false.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'maxEdges'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'defc_b', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'defc_b', r2Ptr)
+
+! Define variable coeffs_reconstruct
+      allocate(r3Ptr(1))
+
+! Setting up time level 1
+      r3Ptr(1) % fieldName = 'coeffs_reconstruct'
+      r3Ptr(1) % isVarArray = .false.
+      r3Ptr(1) % isDecomposed = .true.
+      r3Ptr(1) % hasTimeDimension = .false.
+      r3Ptr(1) % isPersistent = .true.
+      r3Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r3Ptr(1) % dimNames(1) = 'R3'
+      r3Ptr(1) % dimNames(2) = 'maxEdges'
+      r3Ptr(1) % dimNames(3) = 'nCells'
+     r3Ptr(1) % defaultValue = 0.0
+     r3Ptr(1) % defaultValue = 0.0
+     nullify(r3Ptr(1) % array)
+      nullify(r3Ptr(1) % next)
+      nullify(r3Ptr(1) % prev)
+      nullify(r3Ptr(1) % sendList)
+      nullify(r3Ptr(1) % recvList)
+      nullify(r3Ptr(1) % copyList)
+      allocate(r3Ptr(1) % attLists(1))
+      allocate(r3Ptr(1) % attLists(1) % attList)
+      r3Ptr(1) % attLists(1) % attList % attName = ''
+      r3Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r3Ptr(1) % attLists(1) % attList % next)
+      nullify(r3Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r3Ptr(1) % attLists(1) % attList % attValueRealA)
+      r3Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r3Ptr(1) % block => block
+
+      r3Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'coeffs_reconstruct', r3Ptr)
+      call mpas_pool_add_field(block % allFields, 'coeffs_reconstruct', r3Ptr)
+
+
+
+      if (associated(newSubPool)) then
+         call mpas_pool_add_config(newSubPool, 'on_a_sphere', block % domain % on_a_sphere)
+         call mpas_pool_add_config(newSubPool, 'sphere_radius', block % domain % sphere_radius)
+         call mpas_pool_add_config(newSubPool, 'is_periodic', block % domain % is_periodic)
+         call mpas_pool_add_config(newSubPool, 'x_period', block % domain % x_period)
+         call mpas_pool_add_config(newSubPool, 'y_period', block % domain % y_period)
+      end if
+
+   end subroutine init_atm_generate_pool_mesh
+
+
+   subroutine init_atm_generate_pool_state(block, structPool, dimensionPool, packagePool)
+      use mpas_derived_types
+      use mpas_pool_routines
+      use mpas_io_units
+      use mpas_io, only : MPAS_REAL_FILLVAL, MPAS_INT_FILLVAL, MPAS_CHAR_FILLVAL
+      implicit none
+      type (block_type), intent(inout), pointer :: block
+      type (mpas_pool_type), intent(inout) :: structPool
+      type (mpas_pool_type), intent(inout) :: dimensionPool
+      type (mpas_pool_type), intent(in) :: packagePool
+
+      type (field0DReal), dimension(:), pointer :: r0Ptr
+      type (field1DReal), dimension(:), pointer :: r1Ptr
+      type (field2DReal), dimension(:), pointer :: r2Ptr
+      type (field3DReal), dimension(:), pointer :: r3Ptr
+      type (field4DReal), dimension(:), pointer :: r4Ptr
+      type (field5DReal), dimension(:), pointer :: r5Ptr
+      type (field0DInteger), dimension(:), pointer :: i0Ptr
+      type (field1DInteger), dimension(:), pointer :: i1Ptr
+      type (field2DInteger), dimension(:), pointer :: i2Ptr
+      type (field3DInteger), dimension(:), pointer :: i3Ptr
+      type (field0DChar), dimension(:), pointer :: c0Ptr
+      type (field1DChar), dimension(:), pointer :: c1Ptr
+
+      type (mpas_pool_type), pointer :: newSubPool
+      integer :: group_counter
+      logical :: group_started
+      integer :: group_start
+      integer :: index_counter
+      integer, pointer :: const_index
+
+      logical, pointer :: initial_condsActive
+      logical, pointer :: sfc_updateActive
+      logical, pointer :: gwd_stage_inActive
+      logical, pointer :: vertical_stage_inActive
+      logical, pointer :: vertical_stage_outActive
+      logical, pointer :: met_stage_inActive
+      logical, pointer :: met_stage_outActive
+
+
+      integer :: numConstituents
+
+      nullify(newSubPool)
+      group_counter = -1
+      group_started = .false.
+      group_start = -1
+      call mpas_pool_get_package(packagePool, 'initial_condsActive', initial_condsActive)
+      call mpas_pool_get_package(packagePool, 'sfc_updateActive', sfc_updateActive)
+      call mpas_pool_get_package(packagePool, 'gwd_stage_inActive', gwd_stage_inActive)
+      call mpas_pool_get_package(packagePool, 'vertical_stage_inActive', vertical_stage_inActive)
+      call mpas_pool_get_package(packagePool, 'vertical_stage_outActive', vertical_stage_outActive)
+      call mpas_pool_get_package(packagePool, 'met_stage_inActive', met_stage_inActive)
+      call mpas_pool_get_package(packagePool, 'met_stage_outActive', met_stage_outActive)
+
+      allocate(newSubPool)
+      call mpas_pool_create_pool(newSubPool)
+      call mpas_pool_add_subpool(structPool, 'state', newSubPool)
+      call mpas_pool_add_subpool(block % allStructs, 'state', newSubPool)
+
+! Define var array scalars
+      allocate(r3Ptr(1))
+      index_counter = 0
+      group_counter = -1
+      group_start = -1
+      group_started = .false.
+
+! Starting group moist
+! Define constituent var qv
+! My Packages are (null)
+      index_counter = index_counter + 1
+      if (associated(newSubPool)) then
+         call mpas_pool_add_dimension(newSubPool, 'index_qv', index_counter)
+      end if
+      group_counter = group_counter + 1
+      if (.not. group_started) then
+         group_start = index_counter
+         if (associated(newSubPool)) then
+            call mpas_pool_add_dimension(newSubPool, 'moist_start', group_start)
+         end if
+         group_started = .true.
+      end if
+! Define constituent var qc
+! My packages are (null)
+      index_counter = index_counter + 1
+      if (associated(newSubPool)) then
+         call mpas_pool_add_dimension(newSubPool, 'index_qc', index_counter)
+      end if
+      group_counter = group_counter + 1
+      if (.not. group_started) then
+         group_start = index_counter
+         if (associated(newSubPool)) then
+            call mpas_pool_add_dimension(newSubPool, 'moist_start', group_start)
+         end if
+         group_started = .true.
+      end if
+! Define constituent var qr
+! My packages are (null)
+      index_counter = index_counter + 1
+      if (associated(newSubPool)) then
+         call mpas_pool_add_dimension(newSubPool, 'index_qr', index_counter)
+      end if
+      group_counter = group_counter + 1
+      if (.not. group_started) then
+         group_start = index_counter
+         if (associated(newSubPool)) then
+            call mpas_pool_add_dimension(newSubPool, 'moist_start', group_start)
+         end if
+         group_started = .true.
+      end if
+      if (.not. group_started) then
+         if (associated(newSubPool)) then
+            call mpas_pool_add_dimension(newSubPool, 'moist_start', -1)
+            call mpas_pool_add_dimension(newSubPool, 'moist_end', -1)
+         end if
+      else
+         group_started = .false.
+         if (associated(newSubPool)) then
+            call mpas_pool_add_dimension(newSubPool, 'moist_end', index_counter)
+         end if
+      end if
+! End of group       
+
+      numConstituents = index_counter
+      if (associated(newSubPool)) then
+         call mpas_pool_add_dimension(newSubPool, 'num_scalars', numConstituents)
+      end if
+! Defining time level 1
+      allocate( r3Ptr(1) % constituentNames(numConstituents) )
+      r3Ptr(1) % fieldName = 'scalars'
+      r3Ptr(1) % isDecomposed = .true.
+      r3Ptr(1) % hasTimeDimension = .true.
+      r3Ptr(1) % isVarArray = .true.
+      r3Ptr(1) % isPersistent = .true.
+      r3Ptr(1) % isActive = .false.
+
+      if (associated(newSubPool)) then
+         call mpas_pool_get_dimension(newSubPool, 'index_qv', const_index)
+      end if
+      if (const_index > 0) then
+         r3Ptr(1) % constituentNames(const_index) = 'qv'
+      end if
+      if (associated(newSubPool)) then
+         call mpas_pool_get_dimension(newSubPool, 'index_qc', const_index)
+      end if
+      if (const_index > 0) then
+         r3Ptr(1) % constituentNames(const_index) = 'qc'
+      end if
+      if (associated(newSubPool)) then
+         call mpas_pool_get_dimension(newSubPool, 'index_qr', const_index)
+      end if
+      if (const_index > 0) then
+         r3Ptr(1) % constituentNames(const_index) = 'qr'
+      end if
+
+! Setup dimensions for       
+      r3Ptr(1) % dimNames(1) = 'num_scalars'
+      r3Ptr(1) % dimNames(2) = 'nVertLevels'
+      r3Ptr(1) % dimNames(3) = 'nCells'
+
+      nullify(r3Ptr(1) % array)
+      r3Ptr(1) % defaultValue = 0.0
+      nullify(r3Ptr(1) % next)
+      nullify(r3Ptr(1) % prev)
+      nullify(r3Ptr(1) % sendList)
+      nullify(r3Ptr(1) % recvList)
+      nullify(r3Ptr(1) % copyList)
+      allocate(r3Ptr(1) % attLists(size(r3Ptr(1) % constituentNames, dim=1)))
+      do index_counter = 1, size(r3Ptr(1) % constituentNames, dim=1)
+         allocate(r3Ptr(1) % attLists(index_counter) % attList)
+         r3Ptr(1) % attLists(index_counter) % attList % attName = ''
+         r3Ptr(1) % attLists(index_counter) % attList % attType = -1
+         nullify(r3Ptr(1) % attLists(index_counter) % attList % next)
+         nullify(r3Ptr(1) % attLists(index_counter) % attList % attValueIntA)
+         nullify(r3Ptr(1) % attLists(index_counter) % attList % attValueRealA)
+      end do
+      if (associated(newSubPool)) then
+         call mpas_pool_get_dimension(newSubPool, 'index_qv', const_index)
+      end if
+      if (const_index > 0) then
+         r3Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+         r3Ptr(1) % constituentNames(const_index) = 'qv'
+      end if
+      if (associated(newSubPool)) then
+         call mpas_pool_get_dimension(newSubPool, 'index_qc', const_index)
+      end if
+      if (const_index > 0) then
+         r3Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+         r3Ptr(1) % constituentNames(const_index) = 'qc'
+      end if
+      if (associated(newSubPool)) then
+         call mpas_pool_get_dimension(newSubPool, 'index_qr', const_index)
+      end if
+      if (const_index > 0) then
+         r3Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+         r3Ptr(1) % constituentNames(const_index) = 'qr'
+      end if
+      r3Ptr(1) % block => block
+
+            r3Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'scalars', r3Ptr)
+      call mpas_pool_add_field(block % allFields, 'scalars', r3Ptr)
+
+! Define variable initial_time
+      allocate(c0Ptr(1))
+
+! Setting up time level 1
+      c0Ptr(1) % fieldName = 'initial_time'
+      c0Ptr(1) % isVarArray = .false.
+      c0Ptr(1) % isDecomposed = .false.
+      c0Ptr(1) % hasTimeDimension = .false.
+     c0Ptr(1) % defaultValue = ''
+     c0Ptr(1) % defaultValue = ''
+     c0Ptr(1) % scalar = ''
+      nullify(c0Ptr(1) % next)
+      nullify(c0Ptr(1) % prev)
+      nullify(c0Ptr(1) % sendList)
+      nullify(c0Ptr(1) % recvList)
+      nullify(c0Ptr(1) % copyList)
+      allocate(c0Ptr(1) % attLists(1))
+      allocate(c0Ptr(1) % attLists(1) % attList)
+      c0Ptr(1) % attLists(1) % attList % attName = ''
+      c0Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(c0Ptr(1) % attLists(1) % attList % next)
+      nullify(c0Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(c0Ptr(1) % attLists(1) % attList % attValueRealA)
+      call mpas_add_att(c0Ptr(1) % attLists(1) % attList, 'units', 'YYYY-MM-DD_hh:mm:ss')
+      call mpas_add_att(c0Ptr(1) % attLists(1) % attList, 'long_name', 'Model initialization time')
+      c0Ptr(1) % missingValue = MPAS_CHAR_FILLVAL
+      c0Ptr(1) % block => block
+
+      c0Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'initial_time', c0Ptr)
+      call mpas_pool_add_field(block % allFields, 'initial_time', c0Ptr)
+
+! Define variable xtime
+      allocate(c0Ptr(1))
+
+! Setting up time level 1
+      c0Ptr(1) % fieldName = 'xtime'
+      c0Ptr(1) % isVarArray = .false.
+      c0Ptr(1) % isDecomposed = .false.
+      c0Ptr(1) % hasTimeDimension = .true.
+     c0Ptr(1) % defaultValue = ''
+     c0Ptr(1) % defaultValue = ''
+     c0Ptr(1) % scalar = ''
+      nullify(c0Ptr(1) % next)
+      nullify(c0Ptr(1) % prev)
+      nullify(c0Ptr(1) % sendList)
+      nullify(c0Ptr(1) % recvList)
+      nullify(c0Ptr(1) % copyList)
+      allocate(c0Ptr(1) % attLists(1))
+      allocate(c0Ptr(1) % attLists(1) % attList)
+      c0Ptr(1) % attLists(1) % attList % attName = ''
+      c0Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(c0Ptr(1) % attLists(1) % attList % next)
+      nullify(c0Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(c0Ptr(1) % attLists(1) % attList % attValueRealA)
+      c0Ptr(1) % missingValue = MPAS_CHAR_FILLVAL
+      c0Ptr(1) % block => block
+
+      c0Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'xtime', c0Ptr)
+      call mpas_pool_add_field(block % allFields, 'xtime', c0Ptr)
+
+! Define variable u
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'u'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nEdges'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'u', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'u', r2Ptr)
+
+! Define variable w
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'w'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevelsP1'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'w', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'w', r2Ptr)
+
+! Define variable rho_zz
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'rho_zz'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'rho_zz', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'rho_zz', r2Ptr)
+
+! Define variable theta_m
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'theta_m'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'theta_m', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'theta_m', r2Ptr)
+
+! Define variable h_oml_initial
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'h_oml_initial'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .true.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'h_oml_initial', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'h_oml_initial', r1Ptr)
+
+
+
+      if (associated(newSubPool)) then
+         call mpas_pool_add_config(newSubPool, 'on_a_sphere', block % domain % on_a_sphere)
+         call mpas_pool_add_config(newSubPool, 'sphere_radius', block % domain % sphere_radius)
+         call mpas_pool_add_config(newSubPool, 'is_periodic', block % domain % is_periodic)
+         call mpas_pool_add_config(newSubPool, 'x_period', block % domain % x_period)
+         call mpas_pool_add_config(newSubPool, 'y_period', block % domain % y_period)
+      end if
+
+   end subroutine init_atm_generate_pool_state
+
+
+   subroutine init_atm_generate_pool_fg(block, structPool, dimensionPool, packagePool)
+      use mpas_derived_types
+      use mpas_pool_routines
+      use mpas_io_units
+      use mpas_io, only : MPAS_REAL_FILLVAL, MPAS_INT_FILLVAL, MPAS_CHAR_FILLVAL
+      implicit none
+      type (block_type), intent(inout), pointer :: block
+      type (mpas_pool_type), intent(inout) :: structPool
+      type (mpas_pool_type), intent(inout) :: dimensionPool
+      type (mpas_pool_type), intent(in) :: packagePool
+
+      type (field0DReal), dimension(:), pointer :: r0Ptr
+      type (field1DReal), dimension(:), pointer :: r1Ptr
+      type (field2DReal), dimension(:), pointer :: r2Ptr
+      type (field3DReal), dimension(:), pointer :: r3Ptr
+      type (field4DReal), dimension(:), pointer :: r4Ptr
+      type (field5DReal), dimension(:), pointer :: r5Ptr
+      type (field0DInteger), dimension(:), pointer :: i0Ptr
+      type (field1DInteger), dimension(:), pointer :: i1Ptr
+      type (field2DInteger), dimension(:), pointer :: i2Ptr
+      type (field3DInteger), dimension(:), pointer :: i3Ptr
+      type (field0DChar), dimension(:), pointer :: c0Ptr
+      type (field1DChar), dimension(:), pointer :: c1Ptr
+
+      type (mpas_pool_type), pointer :: newSubPool
+      integer :: group_counter
+      logical :: group_started
+      integer :: group_start
+      integer :: index_counter
+      integer, pointer :: const_index
+
+      logical, pointer :: initial_condsActive
+      logical, pointer :: sfc_updateActive
+      logical, pointer :: gwd_stage_inActive
+      logical, pointer :: vertical_stage_inActive
+      logical, pointer :: vertical_stage_outActive
+      logical, pointer :: met_stage_inActive
+      logical, pointer :: met_stage_outActive
+
+
+      integer :: numConstituents
+
+      nullify(newSubPool)
+      group_counter = -1
+      group_started = .false.
+      group_start = -1
+      call mpas_pool_get_package(packagePool, 'initial_condsActive', initial_condsActive)
+      call mpas_pool_get_package(packagePool, 'sfc_updateActive', sfc_updateActive)
+      call mpas_pool_get_package(packagePool, 'gwd_stage_inActive', gwd_stage_inActive)
+      call mpas_pool_get_package(packagePool, 'vertical_stage_inActive', vertical_stage_inActive)
+      call mpas_pool_get_package(packagePool, 'vertical_stage_outActive', vertical_stage_outActive)
+      call mpas_pool_get_package(packagePool, 'met_stage_inActive', met_stage_inActive)
+      call mpas_pool_get_package(packagePool, 'met_stage_outActive', met_stage_outActive)
+
+      allocate(newSubPool)
+      call mpas_pool_create_pool(newSubPool)
+      call mpas_pool_add_subpool(structPool, 'fg', newSubPool)
+      call mpas_pool_add_subpool(block % allStructs, 'fg', newSubPool)
+
+! Define variable u_fg
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'u_fg'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nFGLevels'
+      r2Ptr(1) % dimNames(2) = 'nEdges'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'u', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'u_fg', r2Ptr)
+
+! Define variable v_fg
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'v_fg'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nFGLevels'
+      r2Ptr(1) % dimNames(2) = 'nEdges'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'v', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'v_fg', r2Ptr)
+
+! Define variable t_fg
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 't_fg'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nFGLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 't', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 't_fg', r2Ptr)
+
+! Define variable p_fg
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'p_fg'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nFGLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'p', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'p_fg', r2Ptr)
+
+! Define variable z_fg
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'z_fg'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nFGLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'z', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'z_fg', r2Ptr)
+
+! Define variable rh_fg
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'rh_fg'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nFGLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'rh', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'rh_fg', r2Ptr)
+
+! Define variable sh_fg
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'sh_fg'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nFGLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'sh', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'sh_fg', r2Ptr)
+
+! Define variable soilz_fg
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'soilz_fg'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .true.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'soilz', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'soilz_fg', r1Ptr)
+
+! Define variable psfc_fg
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'psfc_fg'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .true.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'psfc', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'psfc_fg', r1Ptr)
+
+! Define variable pmsl_fg
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'pmsl_fg'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .true.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'pmsl', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'pmsl_fg', r1Ptr)
+
+! Define variable dz_fg
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'dz_fg'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nFGSoilLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'dz_fg', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'dz_fg', r2Ptr)
+
+! Define variable dzs_fg
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'dzs_fg'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nFGSoilLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'dzs_fg', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'dzs_fg', r2Ptr)
+
+! Define variable zs_fg
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'zs_fg'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nFGSoilLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'zs_fg', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'zs_fg', r2Ptr)
+
+! Define variable st_fg
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'st_fg'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nFGSoilLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'st_fg', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'st_fg', r2Ptr)
+
+! Define variable sm_fg
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'sm_fg'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nFGSoilLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'sm_fg', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'sm_fg', r2Ptr)
+
+! Define variable dz
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'dz'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nSoilLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'dz', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'dz', r2Ptr)
+
+! Define variable dzs
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'dzs'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nSoilLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'dzs', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'dzs', r2Ptr)
+
+! Define variable zs
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'zs'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nSoilLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'zs', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'zs', r2Ptr)
+
+! Define variable sh2o
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'sh2o'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nSoilLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'sh2o', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'sh2o', r2Ptr)
+
+! Define variable smois
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'smois'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nSoilLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'smois', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'smois', r2Ptr)
+
+! Define variable tslb
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'tslb'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nSoilLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'tslb', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'tslb', r2Ptr)
+
+! Define variable smcrel
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'smcrel'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nSoilLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'smcrel', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'smcrel', r2Ptr)
+
+! Define variable tmn
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'tmn'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .true.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'tmn', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'tmn', r1Ptr)
+
+! Define variable skintemp
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'skintemp'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .true.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'skintemp', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'skintemp', r1Ptr)
+
+! Define variable sst
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'sst'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .true.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'sst', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'sst', r1Ptr)
+
+! Define variable snow
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'snow'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .true.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'snow', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'snow', r1Ptr)
+
+! Define variable snowc
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'snowc'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .true.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'snowc', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'snowc', r1Ptr)
+
+! Define variable snowh
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'snowh'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .true.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'snowh', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'snowh', r1Ptr)
+
+! Define variable xice
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'xice'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .true.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'xice', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'xice', r1Ptr)
+
+! Define variable seaice
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'seaice'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .true.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'seaice', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'seaice', r1Ptr)
+
+! Define variable gfs_z
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'gfs_z'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'gfs_z', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'gfs_z', r2Ptr)
+
+! Define variable vegfra
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'vegfra'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .true.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'vegfra', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'vegfra', r1Ptr)
+
+! Define variable sfc_albbck
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'sfc_albbck'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .true.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'sfc_albbck', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'sfc_albbck', r1Ptr)
+
+! Define variable xland
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'xland'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .true.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'xland', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'xland', r1Ptr)
+
+! Define variable u10
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'u10'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .true.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'u10', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'u10', r1Ptr)
+
+! Define variable v10
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'v10'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .true.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'v10', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'v10', r1Ptr)
+
+! Define variable q2
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'q2'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .true.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'q2', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'q2', r1Ptr)
+
+! Define variable rh2
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'rh2'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .true.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'rh2', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'rh2', r1Ptr)
+
+! Define variable t2m
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 't2m'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .true.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 't2m', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 't2m', r1Ptr)
+
+
+
+      if (associated(newSubPool)) then
+         call mpas_pool_add_config(newSubPool, 'on_a_sphere', block % domain % on_a_sphere)
+         call mpas_pool_add_config(newSubPool, 'sphere_radius', block % domain % sphere_radius)
+         call mpas_pool_add_config(newSubPool, 'is_periodic', block % domain % is_periodic)
+         call mpas_pool_add_config(newSubPool, 'x_period', block % domain % x_period)
+         call mpas_pool_add_config(newSubPool, 'y_period', block % domain % y_period)
+      end if
+
+   end subroutine init_atm_generate_pool_fg
+
+
+   subroutine init_atm_generate_pool_diag(block, structPool, dimensionPool, packagePool)
+      use mpas_derived_types
+      use mpas_pool_routines
+      use mpas_io_units
+      use mpas_io, only : MPAS_REAL_FILLVAL, MPAS_INT_FILLVAL, MPAS_CHAR_FILLVAL
+      implicit none
+      type (block_type), intent(inout), pointer :: block
+      type (mpas_pool_type), intent(inout) :: structPool
+      type (mpas_pool_type), intent(inout) :: dimensionPool
+      type (mpas_pool_type), intent(in) :: packagePool
+
+      type (field0DReal), dimension(:), pointer :: r0Ptr
+      type (field1DReal), dimension(:), pointer :: r1Ptr
+      type (field2DReal), dimension(:), pointer :: r2Ptr
+      type (field3DReal), dimension(:), pointer :: r3Ptr
+      type (field4DReal), dimension(:), pointer :: r4Ptr
+      type (field5DReal), dimension(:), pointer :: r5Ptr
+      type (field0DInteger), dimension(:), pointer :: i0Ptr
+      type (field1DInteger), dimension(:), pointer :: i1Ptr
+      type (field2DInteger), dimension(:), pointer :: i2Ptr
+      type (field3DInteger), dimension(:), pointer :: i3Ptr
+      type (field0DChar), dimension(:), pointer :: c0Ptr
+      type (field1DChar), dimension(:), pointer :: c1Ptr
+
+      type (mpas_pool_type), pointer :: newSubPool
+      integer :: group_counter
+      logical :: group_started
+      integer :: group_start
+      integer :: index_counter
+      integer, pointer :: const_index
+
+      logical, pointer :: initial_condsActive
+      logical, pointer :: sfc_updateActive
+      logical, pointer :: gwd_stage_inActive
+      logical, pointer :: vertical_stage_inActive
+      logical, pointer :: vertical_stage_outActive
+      logical, pointer :: met_stage_inActive
+      logical, pointer :: met_stage_outActive
+
+
+      integer :: numConstituents
+
+      nullify(newSubPool)
+      group_counter = -1
+      group_started = .false.
+      group_start = -1
+      call mpas_pool_get_package(packagePool, 'initial_condsActive', initial_condsActive)
+      call mpas_pool_get_package(packagePool, 'sfc_updateActive', sfc_updateActive)
+      call mpas_pool_get_package(packagePool, 'gwd_stage_inActive', gwd_stage_inActive)
+      call mpas_pool_get_package(packagePool, 'vertical_stage_inActive', vertical_stage_inActive)
+      call mpas_pool_get_package(packagePool, 'vertical_stage_outActive', vertical_stage_outActive)
+      call mpas_pool_get_package(packagePool, 'met_stage_inActive', met_stage_inActive)
+      call mpas_pool_get_package(packagePool, 'met_stage_outActive', met_stage_outActive)
+
+      allocate(newSubPool)
+      call mpas_pool_create_pool(newSubPool)
+      call mpas_pool_add_subpool(structPool, 'diag', newSubPool)
+      call mpas_pool_add_subpool(block % allStructs, 'diag', newSubPool)
+
+! Define variable pressure_p
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'pressure_p'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'pressure_p', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'pressure_p', r2Ptr)
+
+! Define variable rho
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'rho'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'rho', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'rho', r2Ptr)
+
+! Define variable theta
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'theta'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'theta', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'theta', r2Ptr)
+
+! Define variable v
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'v'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nEdges'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'v', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'v', r2Ptr)
+
+! Define variable relhum
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'relhum'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'relhum', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'relhum', r2Ptr)
+
+! Define variable spechum
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'spechum'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'spechum', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'spechum', r2Ptr)
+
+! Define variable uReconstructX
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'uReconstructX'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'uReconstructX', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'uReconstructX', r2Ptr)
+
+! Define variable uReconstructY
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'uReconstructY'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'uReconstructY', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'uReconstructY', r2Ptr)
+
+! Define variable uReconstructZ
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'uReconstructZ'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'uReconstructZ', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'uReconstructZ', r2Ptr)
+
+! Define variable uReconstructZonal
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'uReconstructZonal'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'uReconstructZonal', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'uReconstructZonal', r2Ptr)
+
+! Define variable uReconstructMeridional
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'uReconstructMeridional'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'uReconstructMeridional', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'uReconstructMeridional', r2Ptr)
+
+! Define variable exner
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'exner'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'exner', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'exner', r2Ptr)
+
+! Define variable exner_base
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'exner_base'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'exner_base', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'exner_base', r2Ptr)
+
+! Define variable rtheta_base
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'rtheta_base'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'rtheta_base', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'rtheta_base', r2Ptr)
+
+! Define variable pressure
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'pressure'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'pressure', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'pressure', r2Ptr)
+
+! Define variable pressure_base
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'pressure_base'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'pressure_base', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'pressure_base', r2Ptr)
+
+! Define variable rho_base
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'rho_base'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'rho_base', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'rho_base', r2Ptr)
+
+! Define variable theta_base
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'theta_base'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'theta_base', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'theta_base', r2Ptr)
+
+! Define variable cqw
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'cqw'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'cqw', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'cqw', r2Ptr)
+
+! Define variable surface_pressure
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'surface_pressure'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .true.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'surface_pressure', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'surface_pressure', r1Ptr)
+
+! Define variable ru
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'ru'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nEdges'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'ru', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'ru', r2Ptr)
+
+! Define variable rw
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'rw'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevelsP1'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'rw', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'rw', r2Ptr)
+
+! Define variable rtheta_p
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'rtheta_p'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'rtheta_p', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'rtheta_p', r2Ptr)
+
+! Define variable rho_p
+      allocate(r2Ptr(1))
+
+! Setting up time level 1
+      r2Ptr(1) % fieldName = 'rho_p'
+      r2Ptr(1) % isVarArray = .false.
+      r2Ptr(1) % isDecomposed = .true.
+      r2Ptr(1) % hasTimeDimension = .true.
+      r2Ptr(1) % isPersistent = .true.
+      r2Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r2Ptr(1) % dimNames(1) = 'nVertLevels'
+      r2Ptr(1) % dimNames(2) = 'nCells'
+     r2Ptr(1) % defaultValue = 0.0
+     r2Ptr(1) % defaultValue = 0.0
+     nullify(r2Ptr(1) % array)
+      nullify(r2Ptr(1) % next)
+      nullify(r2Ptr(1) % prev)
+      nullify(r2Ptr(1) % sendList)
+      nullify(r2Ptr(1) % recvList)
+      nullify(r2Ptr(1) % copyList)
+      allocate(r2Ptr(1) % attLists(1))
+      allocate(r2Ptr(1) % attLists(1) % attList)
+      r2Ptr(1) % attLists(1) % attList % attName = ''
+      r2Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r2Ptr(1) % attLists(1) % attList % next)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r2Ptr(1) % attLists(1) % attList % attValueRealA)
+      r2Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r2Ptr(1) % block => block
+
+      r2Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'rho_p', r2Ptr)
+      call mpas_pool_add_field(block % allFields, 'rho_p', r2Ptr)
+
+
+
+      if (associated(newSubPool)) then
+         call mpas_pool_add_config(newSubPool, 'on_a_sphere', block % domain % on_a_sphere)
+         call mpas_pool_add_config(newSubPool, 'sphere_radius', block % domain % sphere_radius)
+         call mpas_pool_add_config(newSubPool, 'is_periodic', block % domain % is_periodic)
+         call mpas_pool_add_config(newSubPool, 'x_period', block % domain % x_period)
+         call mpas_pool_add_config(newSubPool, 'y_period', block % domain % y_period)
+      end if
+
+   end subroutine init_atm_generate_pool_diag
+
+
+   subroutine init_atm_generate_pool_diag_physics(block, structPool, dimensionPool, packagePool)
+      use mpas_derived_types
+      use mpas_pool_routines
+      use mpas_io_units
+      use mpas_io, only : MPAS_REAL_FILLVAL, MPAS_INT_FILLVAL, MPAS_CHAR_FILLVAL
+      implicit none
+      type (block_type), intent(inout), pointer :: block
+      type (mpas_pool_type), intent(inout) :: structPool
+      type (mpas_pool_type), intent(inout) :: dimensionPool
+      type (mpas_pool_type), intent(in) :: packagePool
+
+      type (field0DReal), dimension(:), pointer :: r0Ptr
+      type (field1DReal), dimension(:), pointer :: r1Ptr
+      type (field2DReal), dimension(:), pointer :: r2Ptr
+      type (field3DReal), dimension(:), pointer :: r3Ptr
+      type (field4DReal), dimension(:), pointer :: r4Ptr
+      type (field5DReal), dimension(:), pointer :: r5Ptr
+      type (field0DInteger), dimension(:), pointer :: i0Ptr
+      type (field1DInteger), dimension(:), pointer :: i1Ptr
+      type (field2DInteger), dimension(:), pointer :: i2Ptr
+      type (field3DInteger), dimension(:), pointer :: i3Ptr
+      type (field0DChar), dimension(:), pointer :: c0Ptr
+      type (field1DChar), dimension(:), pointer :: c1Ptr
+
+      type (mpas_pool_type), pointer :: newSubPool
+      integer :: group_counter
+      logical :: group_started
+      integer :: group_start
+      integer :: index_counter
+      integer, pointer :: const_index
+
+      logical, pointer :: initial_condsActive
+      logical, pointer :: sfc_updateActive
+      logical, pointer :: gwd_stage_inActive
+      logical, pointer :: vertical_stage_inActive
+      logical, pointer :: vertical_stage_outActive
+      logical, pointer :: met_stage_inActive
+      logical, pointer :: met_stage_outActive
+
+
+      integer :: numConstituents
+
+      nullify(newSubPool)
+      group_counter = -1
+      group_started = .false.
+      group_start = -1
+      call mpas_pool_get_package(packagePool, 'initial_condsActive', initial_condsActive)
+      call mpas_pool_get_package(packagePool, 'sfc_updateActive', sfc_updateActive)
+      call mpas_pool_get_package(packagePool, 'gwd_stage_inActive', gwd_stage_inActive)
+      call mpas_pool_get_package(packagePool, 'vertical_stage_inActive', vertical_stage_inActive)
+      call mpas_pool_get_package(packagePool, 'vertical_stage_outActive', vertical_stage_outActive)
+      call mpas_pool_get_package(packagePool, 'met_stage_inActive', met_stage_inActive)
+      call mpas_pool_get_package(packagePool, 'met_stage_outActive', met_stage_outActive)
+
+      allocate(newSubPool)
+      call mpas_pool_create_pool(newSubPool)
+      call mpas_pool_add_subpool(structPool, 'diag_physics', newSubPool)
+      call mpas_pool_add_subpool(block % allStructs, 'diag_physics', newSubPool)
+
+! Define variable precipw
+      allocate(r1Ptr(1))
+
+! Setting up time level 1
+      r1Ptr(1) % fieldName = 'precipw'
+      r1Ptr(1) % isVarArray = .false.
+      r1Ptr(1) % isDecomposed = .true.
+      r1Ptr(1) % hasTimeDimension = .true.
+      r1Ptr(1) % isPersistent = .true.
+      r1Ptr(1) % isActive = .false.
+! Setting up dimensions
+      r1Ptr(1) % dimNames(1) = 'nCells'
+     r1Ptr(1) % defaultValue = 0.0
+     r1Ptr(1) % defaultValue = 0.0
+     nullify(r1Ptr(1) % array)
+      nullify(r1Ptr(1) % next)
+      nullify(r1Ptr(1) % prev)
+      nullify(r1Ptr(1) % sendList)
+      nullify(r1Ptr(1) % recvList)
+      nullify(r1Ptr(1) % copyList)
+      allocate(r1Ptr(1) % attLists(1))
+      allocate(r1Ptr(1) % attLists(1) % attList)
+      r1Ptr(1) % attLists(1) % attList % attName = ''
+      r1Ptr(1) % attLists(1) % attList % attType = -1
+      nullify(r1Ptr(1) % attLists(1) % attList % next)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueIntA)
+      nullify(r1Ptr(1) % attLists(1) % attList % attValueRealA)
+      r1Ptr(1) % missingValue = MPAS_REAL_FILLVAL
+      r1Ptr(1) % block => block
+
+      r1Ptr(1) % isActive = .true.
+      call mpas_pool_add_field(newSubPool, 'precipw', r1Ptr)
+      call mpas_pool_add_field(block % allFields, 'precipw', r1Ptr)
+
+
+
+      if (associated(newSubPool)) then
+         call mpas_pool_add_config(newSubPool, 'on_a_sphere', block % domain % on_a_sphere)
+         call mpas_pool_add_config(newSubPool, 'sphere_radius', block % domain % sphere_radius)
+         call mpas_pool_add_config(newSubPool, 'is_periodic', block % domain % is_periodic)
+         call mpas_pool_add_config(newSubPool, 'x_period', block % domain % x_period)
+         call mpas_pool_add_config(newSubPool, 'y_period', block % domain % y_period)
+      end if
+
+   end subroutine init_atm_generate_pool_diag_physics
+
+
+   subroutine init_atm_generate_structs(block, structPool, dimensionPool, packagePool)
+      use mpas_derived_types
+      use mpas_io_units
+      implicit none
+      type (block_type), pointer, intent(inout) :: block
+      type (mpas_pool_type), intent(inout) :: structPool
+      type (mpas_pool_type), intent(inout) :: dimensionPool
+      type (mpas_pool_type), intent(in) :: packagePool
+
+      call init_atm_generate_pool_mesh(block, structPool, dimensionPool, packagePool)
+
+      call init_atm_generate_pool_state(block, structPool, dimensionPool, packagePool)
+
+      call init_atm_generate_pool_fg(block, structPool, dimensionPool, packagePool)
+
+      call init_atm_generate_pool_diag(block, structPool, dimensionPool, packagePool)
+
+      call init_atm_generate_pool_diag_physics(block, structPool, dimensionPool, packagePool)
+
+   end subroutine init_atm_generate_structs
diff -uprN MPAS-Model-6.2/src/tools/Makefile MPAS-Model-6.2_mod/src/tools/Makefile
--- MPAS-Model-6.2/src/tools/Makefile	2019-03-15 02:53:27.000000000 +0900
+++ MPAS-Model-6.2_mod/src/tools/Makefile	2021-03-25 17:13:26.381662277 +0900
@@ -1,7 +1,7 @@
 
 all:
-	( $(MAKE) build_registry CPPFLAGS="$(CPPFLAGS)" CC="$(CC)" CFLAGS="$(CFLAGS)" )
-	( $(MAKE) build_input_gen CPPFLAGS="$(CPPFLAGS)" CC="$(CC)" CFLAGS="$(CFLAGS)" )
+	( $(MAKE) build_registry CPPFLAGS="$(CPPFLAGS)" CC="gcc" CFLAGS="-O2" )
+	( $(MAKE) build_input_gen CPPFLAGS="$(CPPFLAGS)" CC="gcc" CFLAGS="-O2" )
 
 build_input_gen:
 ifdef MPAS_TOOL_DIR
