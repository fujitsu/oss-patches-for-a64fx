diff -Naur src-00orig/MAKE/OPTIONS/Makefile.fj_fjmpi_clang_O3 src/MAKE/OPTIONS/Makefile.fj_fjmpi_clang_O3
--- src-00orig/MAKE/OPTIONS/Makefile.fj_fjmpi_clang_O3	1970-01-01 09:00:00.000000000 +0900
+++ src/MAKE/OPTIONS/Makefile.fj_fjmpi_clang_O3	2021-07-30 08:22:38.000000000 +0900
@@ -0,0 +1,128 @@
+# g++_openmpi = OpenMPI with compiler set to GNU g++
+
+SHELL = /bin/sh
+
+# ---------------------------------------------------------------------
+# compiler/linker settings
+# specify flags and libraries needed for your compiler
+
+#export OMPI_CXX = g++
+CC =		mpiFCCpx
+BASEFLAGS =	-g -Nclang -Nlibomp \
+                -march=armv8-a+sve -mcpu=a64fx -mtune=a64fx   \
+                -Ofast -fvectorize -ffj-ocl -fstrict-aliasing \
+                -fsigned-char -ffj-optlib-string \
+                -Koptmsg=2 -ffj-lst=t -ffj-src #-finstrument-functions
+CCFLAGS = $(BASEFLAGS) -fopenmp
+SHFLAGS =	-fPIC
+DEPFLAGS =	-M
+
+LINK =		mpiFCCpx
+LINKFLAGS =	-g -Nclang -Nlibomp -O3 -fopenmp -ffj-fjprof #-fsanitize=undefined -fsanitize=thread
+LIB = 
+SIZE =		size
+
+ARCHIVE =	ar
+ARFLAGS =	-rc
+SHLIBFLAGS =	-shared
+
+pair_lj_cut_intel.o: CCFLAGS += -ffj-interleave-loop-insns=3
+
+# ---------------------------------------------------------------------
+# LAMMPS-specific settings, all OPTIONAL
+# specify settings for LAMMPS features you will use
+# if you change any -D setting, do full re-compile after "make clean"
+
+# LAMMPS ifdef settings
+# see possible settings in Section 2.2 (step 4) of manual
+
+LMP_INC =	-DLAMMPS_GZIP
+
+# MPI library
+# see discussion in Section 2.2 (step 5) of manual
+# MPI wrapper compiler/linker can provide this info
+# can point to dummy MPI library in src/STUBS as in Makefile.serial
+# use -D MPICH and OMPI settings in INC to avoid C++ lib conflicts
+# INC = path for mpi.h, MPI compiler settings
+# PATH = path for MPI library
+# LIB = name of MPI library
+
+MPI_INC =       -DMPICH_SKIP_MPICXX -DOMPI_SKIP_MPICXX=1
+MPI_PATH = 
+MPI_LIB =	
+
+# FFT library
+# see discussion in Section 2.2 (step 6) of manaul
+# can be left blank to use provided KISS FFT library
+# INC = -DFFT setting, e.g. -DFFT_FFTW, FFT compiler settings
+# PATH = path for FFT library
+# LIB = name of FFT library
+
+FFT_INC =    	
+FFT_PATH = 
+FFT_LIB =	
+
+# JPEG and/or PNG library
+# see discussion in Section 2.2 (step 7) of manual
+# only needed if -DLAMMPS_JPEG or -DLAMMPS_PNG listed with LMP_INC
+# INC = path(s) for jpeglib.h and/or png.h
+# PATH = path(s) for JPEG library and/or PNG library
+# LIB = name(s) of JPEG library and/or PNG library
+
+JPG_INC =       
+JPG_PATH = 	
+JPG_LIB =	
+
+# ---------------------------------------------------------------------
+# build rules and dependencies
+# do not edit this section
+
+include	Makefile.package.settings
+include	Makefile.package
+
+EXTRA_INC = $(LMP_INC) $(PKG_INC) $(MPI_INC) $(FFT_INC) $(JPG_INC) $(PKG_SYSINC)
+EXTRA_PATH = $(PKG_PATH) $(MPI_PATH) $(FFT_PATH) $(JPG_PATH) $(PKG_SYSPATH)
+EXTRA_LIB = $(PKG_LIB) $(MPI_LIB) $(FFT_LIB) $(JPG_LIB) $(PKG_SYSLIB)
+EXTRA_CPP_DEPENDS = $(PKG_CPP_DEPENDS)
+EXTRA_LINK_DEPENDS = $(PKG_LINK_DEPENDS)
+
+# Path to src files
+
+vpath %.cpp ..
+vpath %.h ..
+
+# Link target
+
+$(EXE):	$(OBJ) $(EXTRA_LINK_DEPENDS)
+	$(LINK) $(LINKFLAGS) $(EXTRA_PATH) $(OBJ) $(EXTRA_LIB) $(LIB) -o $(EXE)
+	$(SIZE) $(EXE)
+
+# Library targets
+
+lib:	$(OBJ) $(EXTRA_LINK_DEPENDS)
+	$(ARCHIVE) $(ARFLAGS) $(EXE) $(OBJ)
+
+shlib:	$(OBJ) $(EXTRA_LINK_DEPENDS)
+	$(CC) $(CCFLAGS) $(SHFLAGS) $(SHLIBFLAGS) $(EXTRA_PATH) -o $(EXE) \
+        $(OBJ) $(EXTRA_LIB) $(LIB)
+
+# Compilation rules
+
+%.o:%.cpp $(EXTRA_CPP_DEPENDS)
+	$(CC) $(CCFLAGS) $(SHFLAGS) $(EXTRA_INC) -c $<
+
+%.d:%.cpp $(EXTRA_CPP_DEPENDS)
+	$(CC) $(CCFLAGS) $(EXTRA_INC) $(DEPFLAGS) $< > $@
+
+%.o:%.cu $(EXTRA_CPP_DEPENDS)
+	$(CC) $(CCFLAGS) $(SHFLAGS) $(EXTRA_INC) -c $<
+
+# Individual dependencies
+
+depend : fastdep.exe $(SRC)
+	@./fastdep.exe $(EXTRA_INC) -- $^ > .depend || exit 1
+
+fastdep.exe: ../DEPEND/fastdep.c
+	cc -O -o $@ $<
+
+sinclude .depend
diff -Naur src-00orig/compile.sh src/compile.sh
--- src-00orig/compile.sh	1970-01-01 09:00:00.000000000 +0900
+++ src/compile.sh	2021-07-30 08:22:38.000000000 +0900
@@ -0,0 +1,16 @@
+#!/bin/bash -x
+
+export LANG=C
+
+LANG_HOME=/opt/FJSVxtclanga/tcsds-1.2.31
+export PATH=${LANG_HOME}/bin:$PATH
+export LD_LIBRARY_PATH=${LANG_HOME}/lib64:$LD_LIBRARY_PATH
+
+for style in airebo_intel airebo_morse_intel rebo_intel tersoff_intel
+do
+  rm pair_${style}.cpp pair_${style}.h
+done
+
+time -p make fj_fjmpi_clang_O3
+
+exit
diff -Naur src-00orig/npair_intel.cpp src/npair_intel.cpp
--- src-00orig/npair_intel.cpp	2021-07-21 11:01:05.000000000 +0900
+++ src/npair_intel.cpp	2021-07-30 08:13:57.000000000 +0900
@@ -359,8 +359,12 @@
             tjtype[u] = x[j].w;
             if (THREE) ttag[u] = tag[j];
           }
-
-          if (FULL == 0 || TRI == 1) {
+// Fujitsu 2021/07/20 Mod >>
+// Bug fix for USER-INTEL package. #1813
+// https://github.com/lammps/lammps/pull/1813
+//        if (FULL == 0 || TRI == 1) {
+          if (FULL == 0 && TRI != 1) {
+// Fujitsu 2021/07/20 Mod <<
             icount = 0;
             istart = ncount;
             IP_PRE_edge_align(istart, sizeof(int));
@@ -392,7 +396,12 @@
         // ---------------------- Loop over i bin
 
         int n = 0;
-        if (FULL == 0 || TRI == 1) {
+// Fujitsu 2021/07/20 Mod >>
+// Bug fix for USER-INTEL package. #1813      
+// https://github.com/lammps/lammps/pull/1813 
+//        if (FULL == 0 || TRI == 1) {
+          if (FULL == 0 && TRI != 1) {
+// Fujitsu 2021/07/20 Mod <<
           #if defined(LMP_SIMD_COMPILER)
           #pragma vector aligned
           #pragma ivdep
diff -Naur src-00orig/pair_lj_cut_intel.cpp src/pair_lj_cut_intel.cpp
--- src-00orig/pair_lj_cut_intel.cpp	2021-07-21 11:01:05.000000000 +0900
+++ src/pair_lj_cut_intel.cpp	2021-07-30 08:22:38.000000000 +0900
@@ -240,6 +240,9 @@
         #pragma simd reduction(+:fxtmp, fytmp, fztmp, fwtmp, sevdwl, \
                                sv0, sv1, sv2, sv3, sv4, sv5)
         #endif
+// Fujitsu 2021/07/19 Add >>
+#pragma clang loop vectorize(assume_safety)
+// Fujitsu 2021/07/19 Add <<
         for (int jj = 0; jj < jnum; jj++) {
           flt_t forcelj, evdwl;
           forcelj = evdwl = (flt_t)0.0;
